
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Character
 * 
 */
export type Character = {
  id: number
  name: string
  player: string
  class: string
  level: number
  background: string
  race: string
  alignment: string
  profBonus: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Stats
 * 
 */
export type Stats = {
  id: number
  characterId: number
  str: number
  dex: number
  con: number
  int: number
  wis: number
  cha: number
}

/**
 * Model SavingThrows
 * 
 */
export type SavingThrows = {
  id: number
  characterId: number
  str: number
  dex: number
  con: number
  int: number
  wis: number
  cha: number
}

/**
 * Model Skills
 * 
 */
export type Skills = {
  id: number
  characterId: number
  acrobatics: number
  animHand: number
  arcane: number
  athl: number
  decep: number
  hist: number
  insight: number
  intimid: number
  invest: number
  med: number
  nature: number
  percep: number
  perf: number
  pers: number
  religion: number
  sOfH: number
  stealth: number
  surv: number
}

/**
 * Model Combat
 * 
 */
export type Combat = {
  id: number
  characterId: number
  hpMax: number
  ac: number
  speed: number
  hitDice: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Characters
 * const characters = await prisma.character.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Characters
   * const characters = await prisma.character.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.character`: Exposes CRUD operations for the **Character** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Characters
    * const characters = await prisma.character.findMany()
    * ```
    */
  get character(): Prisma.CharacterDelegate<GlobalReject>;

  /**
   * `prisma.stats`: Exposes CRUD operations for the **Stats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stats
    * const stats = await prisma.stats.findMany()
    * ```
    */
  get stats(): Prisma.StatsDelegate<GlobalReject>;

  /**
   * `prisma.savingThrows`: Exposes CRUD operations for the **SavingThrows** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavingThrows
    * const savingThrows = await prisma.savingThrows.findMany()
    * ```
    */
  get savingThrows(): Prisma.SavingThrowsDelegate<GlobalReject>;

  /**
   * `prisma.skills`: Exposes CRUD operations for the **Skills** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skills
    * const skills = await prisma.skills.findMany()
    * ```
    */
  get skills(): Prisma.SkillsDelegate<GlobalReject>;

  /**
   * `prisma.combat`: Exposes CRUD operations for the **Combat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Combats
    * const combats = await prisma.combat.findMany()
    * ```
    */
  get combat(): Prisma.CombatDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: ca7fcef713137fa11029d519a9780db130cca91d
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Character: 'Character',
    Stats: 'Stats',
    SavingThrows: 'SavingThrows',
    Skills: 'Skills',
    Combat: 'Combat'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Character
   */


  export type AggregateCharacter = {
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  export type CharacterAvgAggregateOutputType = {
    id: number | null
    level: number | null
    profBonus: number | null
  }

  export type CharacterSumAggregateOutputType = {
    id: number | null
    level: number | null
    profBonus: number | null
  }

  export type CharacterMinAggregateOutputType = {
    id: number | null
    name: string | null
    player: string | null
    class: string | null
    level: number | null
    background: string | null
    race: string | null
    alignment: string | null
    profBonus: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterMaxAggregateOutputType = {
    id: number | null
    name: string | null
    player: string | null
    class: string | null
    level: number | null
    background: string | null
    race: string | null
    alignment: string | null
    profBonus: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CharacterCountAggregateOutputType = {
    id: number
    name: number
    player: number
    class: number
    level: number
    background: number
    race: number
    alignment: number
    profBonus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CharacterAvgAggregateInputType = {
    id?: true
    level?: true
    profBonus?: true
  }

  export type CharacterSumAggregateInputType = {
    id?: true
    level?: true
    profBonus?: true
  }

  export type CharacterMinAggregateInputType = {
    id?: true
    name?: true
    player?: true
    class?: true
    level?: true
    background?: true
    race?: true
    alignment?: true
    profBonus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterMaxAggregateInputType = {
    id?: true
    name?: true
    player?: true
    class?: true
    level?: true
    background?: true
    race?: true
    alignment?: true
    profBonus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CharacterCountAggregateInputType = {
    id?: true
    name?: true
    player?: true
    class?: true
    level?: true
    background?: true
    race?: true
    alignment?: true
    profBonus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CharacterAggregateArgs = {
    /**
     * Filter which Character to aggregate.
     * 
    **/
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     * 
    **/
    orderBy?: Enumerable<CharacterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Characters
    **/
    _count?: true | CharacterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CharacterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CharacterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CharacterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CharacterMaxAggregateInputType
  }

  export type GetCharacterAggregateType<T extends CharacterAggregateArgs> = {
        [P in keyof T & keyof AggregateCharacter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCharacter[P]>
      : GetScalarType<T[P], AggregateCharacter[P]>
  }




  export type CharacterGroupByArgs = {
    where?: CharacterWhereInput
    orderBy?: Enumerable<CharacterOrderByWithAggregationInput>
    by: Array<CharacterScalarFieldEnum>
    having?: CharacterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CharacterCountAggregateInputType | true
    _avg?: CharacterAvgAggregateInputType
    _sum?: CharacterSumAggregateInputType
    _min?: CharacterMinAggregateInputType
    _max?: CharacterMaxAggregateInputType
  }


  export type CharacterGroupByOutputType = {
    id: number
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    createdAt: Date
    updatedAt: Date
    _count: CharacterCountAggregateOutputType | null
    _avg: CharacterAvgAggregateOutputType | null
    _sum: CharacterSumAggregateOutputType | null
    _min: CharacterMinAggregateOutputType | null
    _max: CharacterMaxAggregateOutputType | null
  }

  type GetCharacterGroupByPayload<T extends CharacterGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CharacterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CharacterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CharacterGroupByOutputType[P]>
            : GetScalarType<T[P], CharacterGroupByOutputType[P]>
        }
      >
    >


  export type CharacterSelect = {
    id?: boolean
    name?: boolean
    player?: boolean
    class?: boolean
    level?: boolean
    background?: boolean
    race?: boolean
    alignment?: boolean
    profBonus?: boolean
    stats?: boolean | StatsArgs
    savingThrows?: boolean | SavingThrowsArgs
    skills?: boolean | SkillsArgs
    combat?: boolean | CombatArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CharacterInclude = {
    stats?: boolean | StatsArgs
    savingThrows?: boolean | SavingThrowsArgs
    skills?: boolean | SkillsArgs
    combat?: boolean | CombatArgs
  }

  export type CharacterGetPayload<
    S extends boolean | null | undefined | CharacterArgs,
    U = keyof S
      > = S extends true
        ? Character
    : S extends undefined
    ? never
    : S extends CharacterArgs | CharacterFindManyArgs
    ?'include' extends U
    ? Character  & {
    [P in TrueKeys<S['include']>]:
        P extends 'stats' ? StatsGetPayload<S['include'][P]> | null :
        P extends 'savingThrows' ? SavingThrowsGetPayload<S['include'][P]> | null :
        P extends 'skills' ? SkillsGetPayload<S['include'][P]> | null :
        P extends 'combat' ? CombatGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'stats' ? StatsGetPayload<S['select'][P]> | null :
        P extends 'savingThrows' ? SavingThrowsGetPayload<S['select'][P]> | null :
        P extends 'skills' ? SkillsGetPayload<S['select'][P]> | null :
        P extends 'combat' ? CombatGetPayload<S['select'][P]> | null :  P extends keyof Character ? Character[P] : never
  } 
    : Character
  : Character


  type CharacterCountArgs = Merge<
    Omit<CharacterFindManyArgs, 'select' | 'include'> & {
      select?: CharacterCountAggregateInputType | true
    }
  >

  export interface CharacterDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Character that matches the filter.
     * @param {CharacterFindUniqueArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CharacterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CharacterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Character'> extends True ? CheckSelect<T, Prisma__CharacterClient<Character>, Prisma__CharacterClient<CharacterGetPayload<T>>> : CheckSelect<T, Prisma__CharacterClient<Character | null >, Prisma__CharacterClient<CharacterGetPayload<T> | null >>

    /**
     * Find the first Character that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindFirstArgs} args - Arguments to find a Character
     * @example
     * // Get one Character
     * const character = await prisma.character.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CharacterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CharacterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Character'> extends True ? CheckSelect<T, Prisma__CharacterClient<Character>, Prisma__CharacterClient<CharacterGetPayload<T>>> : CheckSelect<T, Prisma__CharacterClient<Character | null >, Prisma__CharacterClient<CharacterGetPayload<T> | null >>

    /**
     * Find zero or more Characters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Characters
     * const characters = await prisma.character.findMany()
     * 
     * // Get first 10 Characters
     * const characters = await prisma.character.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const characterWithIdOnly = await prisma.character.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CharacterFindManyArgs>(
      args?: SelectSubset<T, CharacterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Character>>, PrismaPromise<Array<CharacterGetPayload<T>>>>

    /**
     * Create a Character.
     * @param {CharacterCreateArgs} args - Arguments to create a Character.
     * @example
     * // Create one Character
     * const Character = await prisma.character.create({
     *   data: {
     *     // ... data to create a Character
     *   }
     * })
     * 
    **/
    create<T extends CharacterCreateArgs>(
      args: SelectSubset<T, CharacterCreateArgs>
    ): CheckSelect<T, Prisma__CharacterClient<Character>, Prisma__CharacterClient<CharacterGetPayload<T>>>

    /**
     * Create many Characters.
     *     @param {CharacterCreateManyArgs} args - Arguments to create many Characters.
     *     @example
     *     // Create many Characters
     *     const character = await prisma.character.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CharacterCreateManyArgs>(
      args?: SelectSubset<T, CharacterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Character.
     * @param {CharacterDeleteArgs} args - Arguments to delete one Character.
     * @example
     * // Delete one Character
     * const Character = await prisma.character.delete({
     *   where: {
     *     // ... filter to delete one Character
     *   }
     * })
     * 
    **/
    delete<T extends CharacterDeleteArgs>(
      args: SelectSubset<T, CharacterDeleteArgs>
    ): CheckSelect<T, Prisma__CharacterClient<Character>, Prisma__CharacterClient<CharacterGetPayload<T>>>

    /**
     * Update one Character.
     * @param {CharacterUpdateArgs} args - Arguments to update one Character.
     * @example
     * // Update one Character
     * const character = await prisma.character.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CharacterUpdateArgs>(
      args: SelectSubset<T, CharacterUpdateArgs>
    ): CheckSelect<T, Prisma__CharacterClient<Character>, Prisma__CharacterClient<CharacterGetPayload<T>>>

    /**
     * Delete zero or more Characters.
     * @param {CharacterDeleteManyArgs} args - Arguments to filter Characters to delete.
     * @example
     * // Delete a few Characters
     * const { count } = await prisma.character.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CharacterDeleteManyArgs>(
      args?: SelectSubset<T, CharacterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Characters
     * const character = await prisma.character.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CharacterUpdateManyArgs>(
      args: SelectSubset<T, CharacterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Character.
     * @param {CharacterUpsertArgs} args - Arguments to update or create a Character.
     * @example
     * // Update or create a Character
     * const character = await prisma.character.upsert({
     *   create: {
     *     // ... data to create a Character
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Character we want to update
     *   }
     * })
    **/
    upsert<T extends CharacterUpsertArgs>(
      args: SelectSubset<T, CharacterUpsertArgs>
    ): CheckSelect<T, Prisma__CharacterClient<Character>, Prisma__CharacterClient<CharacterGetPayload<T>>>

    /**
     * Count the number of Characters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterCountArgs} args - Arguments to filter Characters to count.
     * @example
     * // Count the number of Characters
     * const count = await prisma.character.count({
     *   where: {
     *     // ... the filter for the Characters we want to count
     *   }
     * })
    **/
    count<T extends CharacterCountArgs>(
      args?: Subset<T, CharacterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CharacterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CharacterAggregateArgs>(args: Subset<T, CharacterAggregateArgs>): PrismaPromise<GetCharacterAggregateType<T>>

    /**
     * Group by Character.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CharacterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CharacterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CharacterGroupByArgs['orderBy'] }
        : { orderBy?: CharacterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CharacterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCharacterGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Character.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CharacterClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    stats<T extends StatsArgs = {}>(args?: Subset<T, StatsArgs>): CheckSelect<T, Prisma__StatsClient<Stats | null >, Prisma__StatsClient<StatsGetPayload<T> | null >>;

    savingThrows<T extends SavingThrowsArgs = {}>(args?: Subset<T, SavingThrowsArgs>): CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows | null >, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T> | null >>;

    skills<T extends SkillsArgs = {}>(args?: Subset<T, SkillsArgs>): CheckSelect<T, Prisma__SkillsClient<Skills | null >, Prisma__SkillsClient<SkillsGetPayload<T> | null >>;

    combat<T extends CombatArgs = {}>(args?: Subset<T, CombatArgs>): CheckSelect<T, Prisma__CombatClient<Combat | null >, Prisma__CombatClient<CombatGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Character findUnique
   */
  export type CharacterFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
    /**
     * Throw an Error if a Character can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Character to fetch.
     * 
    **/
    where: CharacterWhereUniqueInput
  }


  /**
   * Character findFirst
   */
  export type CharacterFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
    /**
     * Throw an Error if a Character can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Character to fetch.
     * 
    **/
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     * 
    **/
    orderBy?: Enumerable<CharacterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Characters.
     * 
    **/
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Characters.
     * 
    **/
    distinct?: Enumerable<CharacterScalarFieldEnum>
  }


  /**
   * Character findMany
   */
  export type CharacterFindManyArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
    /**
     * Filter, which Characters to fetch.
     * 
    **/
    where?: CharacterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Characters to fetch.
     * 
    **/
    orderBy?: Enumerable<CharacterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Characters.
     * 
    **/
    cursor?: CharacterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Characters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Characters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CharacterScalarFieldEnum>
  }


  /**
   * Character create
   */
  export type CharacterCreateArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
    /**
     * The data needed to create a Character.
     * 
    **/
    data: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
  }


  /**
   * Character createMany
   */
  export type CharacterCreateManyArgs = {
    /**
     * The data used to create many Characters.
     * 
    **/
    data: Enumerable<CharacterCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Character update
   */
  export type CharacterUpdateArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
    /**
     * The data needed to update a Character.
     * 
    **/
    data: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
    /**
     * Choose, which Character to update.
     * 
    **/
    where: CharacterWhereUniqueInput
  }


  /**
   * Character updateMany
   */
  export type CharacterUpdateManyArgs = {
    /**
     * The data used to update Characters.
     * 
    **/
    data: XOR<CharacterUpdateManyMutationInput, CharacterUncheckedUpdateManyInput>
    /**
     * Filter which Characters to update
     * 
    **/
    where?: CharacterWhereInput
  }


  /**
   * Character upsert
   */
  export type CharacterUpsertArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
    /**
     * The filter to search for the Character to update in case it exists.
     * 
    **/
    where: CharacterWhereUniqueInput
    /**
     * In case the Character found by the `where` argument doesn't exist, create a new Character with this data.
     * 
    **/
    create: XOR<CharacterCreateInput, CharacterUncheckedCreateInput>
    /**
     * In case the Character was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CharacterUpdateInput, CharacterUncheckedUpdateInput>
  }


  /**
   * Character delete
   */
  export type CharacterDeleteArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
    /**
     * Filter which Character to delete.
     * 
    **/
    where: CharacterWhereUniqueInput
  }


  /**
   * Character deleteMany
   */
  export type CharacterDeleteManyArgs = {
    /**
     * Filter which Characters to delete
     * 
    **/
    where?: CharacterWhereInput
  }


  /**
   * Character without action
   */
  export type CharacterArgs = {
    /**
     * Select specific fields to fetch from the Character
     * 
    **/
    select?: CharacterSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CharacterInclude | null
  }



  /**
   * Model Stats
   */


  export type AggregateStats = {
    _count: StatsCountAggregateOutputType | null
    _avg: StatsAvgAggregateOutputType | null
    _sum: StatsSumAggregateOutputType | null
    _min: StatsMinAggregateOutputType | null
    _max: StatsMaxAggregateOutputType | null
  }

  export type StatsAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type StatsSumAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type StatsMinAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type StatsMaxAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type StatsCountAggregateOutputType = {
    id: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
    _all: number
  }


  export type StatsAvgAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type StatsSumAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type StatsMinAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type StatsMaxAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type StatsCountAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
    _all?: true
  }

  export type StatsAggregateArgs = {
    /**
     * Filter which Stats to aggregate.
     * 
    **/
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stats
    **/
    _count?: true | StatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatsMaxAggregateInputType
  }

  export type GetStatsAggregateType<T extends StatsAggregateArgs> = {
        [P in keyof T & keyof AggregateStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStats[P]>
      : GetScalarType<T[P], AggregateStats[P]>
  }




  export type StatsGroupByArgs = {
    where?: StatsWhereInput
    orderBy?: Enumerable<StatsOrderByWithAggregationInput>
    by: Array<StatsScalarFieldEnum>
    having?: StatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatsCountAggregateInputType | true
    _avg?: StatsAvgAggregateInputType
    _sum?: StatsSumAggregateInputType
    _min?: StatsMinAggregateInputType
    _max?: StatsMaxAggregateInputType
  }


  export type StatsGroupByOutputType = {
    id: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
    _count: StatsCountAggregateOutputType | null
    _avg: StatsAvgAggregateOutputType | null
    _sum: StatsSumAggregateOutputType | null
    _min: StatsMinAggregateOutputType | null
    _max: StatsMaxAggregateOutputType | null
  }

  type GetStatsGroupByPayload<T extends StatsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatsGroupByOutputType[P]>
            : GetScalarType<T[P], StatsGroupByOutputType[P]>
        }
      >
    >


  export type StatsSelect = {
    id?: boolean
    characterId?: boolean
    character?: boolean | CharacterArgs
    str?: boolean
    dex?: boolean
    con?: boolean
    int?: boolean
    wis?: boolean
    cha?: boolean
  }

  export type StatsInclude = {
    character?: boolean | CharacterArgs
  }

  export type StatsGetPayload<
    S extends boolean | null | undefined | StatsArgs,
    U = keyof S
      > = S extends true
        ? Stats
    : S extends undefined
    ? never
    : S extends StatsArgs | StatsFindManyArgs
    ?'include' extends U
    ? Stats  & {
    [P in TrueKeys<S['include']>]:
        P extends 'character' ? CharacterGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'character' ? CharacterGetPayload<S['select'][P]> :  P extends keyof Stats ? Stats[P] : never
  } 
    : Stats
  : Stats


  type StatsCountArgs = Merge<
    Omit<StatsFindManyArgs, 'select' | 'include'> & {
      select?: StatsCountAggregateInputType | true
    }
  >

  export interface StatsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Stats that matches the filter.
     * @param {StatsFindUniqueArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StatsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StatsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stats'> extends True ? CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>> : CheckSelect<T, Prisma__StatsClient<Stats | null >, Prisma__StatsClient<StatsGetPayload<T> | null >>

    /**
     * Find the first Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsFindFirstArgs} args - Arguments to find a Stats
     * @example
     * // Get one Stats
     * const stats = await prisma.stats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StatsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StatsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stats'> extends True ? CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>> : CheckSelect<T, Prisma__StatsClient<Stats | null >, Prisma__StatsClient<StatsGetPayload<T> | null >>

    /**
     * Find zero or more Stats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stats
     * const stats = await prisma.stats.findMany()
     * 
     * // Get first 10 Stats
     * const stats = await prisma.stats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statsWithIdOnly = await prisma.stats.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StatsFindManyArgs>(
      args?: SelectSubset<T, StatsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Stats>>, PrismaPromise<Array<StatsGetPayload<T>>>>

    /**
     * Create a Stats.
     * @param {StatsCreateArgs} args - Arguments to create a Stats.
     * @example
     * // Create one Stats
     * const Stats = await prisma.stats.create({
     *   data: {
     *     // ... data to create a Stats
     *   }
     * })
     * 
    **/
    create<T extends StatsCreateArgs>(
      args: SelectSubset<T, StatsCreateArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Create many Stats.
     *     @param {StatsCreateManyArgs} args - Arguments to create many Stats.
     *     @example
     *     // Create many Stats
     *     const stats = await prisma.stats.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StatsCreateManyArgs>(
      args?: SelectSubset<T, StatsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Stats.
     * @param {StatsDeleteArgs} args - Arguments to delete one Stats.
     * @example
     * // Delete one Stats
     * const Stats = await prisma.stats.delete({
     *   where: {
     *     // ... filter to delete one Stats
     *   }
     * })
     * 
    **/
    delete<T extends StatsDeleteArgs>(
      args: SelectSubset<T, StatsDeleteArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Update one Stats.
     * @param {StatsUpdateArgs} args - Arguments to update one Stats.
     * @example
     * // Update one Stats
     * const stats = await prisma.stats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StatsUpdateArgs>(
      args: SelectSubset<T, StatsUpdateArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Delete zero or more Stats.
     * @param {StatsDeleteManyArgs} args - Arguments to filter Stats to delete.
     * @example
     * // Delete a few Stats
     * const { count } = await prisma.stats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StatsDeleteManyArgs>(
      args?: SelectSubset<T, StatsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stats
     * const stats = await prisma.stats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StatsUpdateManyArgs>(
      args: SelectSubset<T, StatsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stats.
     * @param {StatsUpsertArgs} args - Arguments to update or create a Stats.
     * @example
     * // Update or create a Stats
     * const stats = await prisma.stats.upsert({
     *   create: {
     *     // ... data to create a Stats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stats we want to update
     *   }
     * })
    **/
    upsert<T extends StatsUpsertArgs>(
      args: SelectSubset<T, StatsUpsertArgs>
    ): CheckSelect<T, Prisma__StatsClient<Stats>, Prisma__StatsClient<StatsGetPayload<T>>>

    /**
     * Count the number of Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsCountArgs} args - Arguments to filter Stats to count.
     * @example
     * // Count the number of Stats
     * const count = await prisma.stats.count({
     *   where: {
     *     // ... the filter for the Stats we want to count
     *   }
     * })
    **/
    count<T extends StatsCountArgs>(
      args?: Subset<T, StatsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatsAggregateArgs>(args: Subset<T, StatsAggregateArgs>): PrismaPromise<GetStatsAggregateType<T>>

    /**
     * Group by Stats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatsGroupByArgs['orderBy'] }
        : { orderBy?: StatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StatsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    character<T extends CharacterArgs = {}>(args?: Subset<T, CharacterArgs>): CheckSelect<T, Prisma__CharacterClient<Character | null >, Prisma__CharacterClient<CharacterGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Stats findUnique
   */
  export type StatsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
    /**
     * Throw an Error if a Stats can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stats to fetch.
     * 
    **/
    where: StatsWhereUniqueInput
  }


  /**
   * Stats findFirst
   */
  export type StatsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
    /**
     * Throw an Error if a Stats can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Stats to fetch.
     * 
    **/
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stats.
     * 
    **/
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stats.
     * 
    **/
    distinct?: Enumerable<StatsScalarFieldEnum>
  }


  /**
   * Stats findMany
   */
  export type StatsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
    /**
     * Filter, which Stats to fetch.
     * 
    **/
    where?: StatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stats to fetch.
     * 
    **/
    orderBy?: Enumerable<StatsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stats.
     * 
    **/
    cursor?: StatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stats.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StatsScalarFieldEnum>
  }


  /**
   * Stats create
   */
  export type StatsCreateArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
    /**
     * The data needed to create a Stats.
     * 
    **/
    data: XOR<StatsCreateInput, StatsUncheckedCreateInput>
  }


  /**
   * Stats createMany
   */
  export type StatsCreateManyArgs = {
    /**
     * The data used to create many Stats.
     * 
    **/
    data: Enumerable<StatsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stats update
   */
  export type StatsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
    /**
     * The data needed to update a Stats.
     * 
    **/
    data: XOR<StatsUpdateInput, StatsUncheckedUpdateInput>
    /**
     * Choose, which Stats to update.
     * 
    **/
    where: StatsWhereUniqueInput
  }


  /**
   * Stats updateMany
   */
  export type StatsUpdateManyArgs = {
    /**
     * The data used to update Stats.
     * 
    **/
    data: XOR<StatsUpdateManyMutationInput, StatsUncheckedUpdateManyInput>
    /**
     * Filter which Stats to update
     * 
    **/
    where?: StatsWhereInput
  }


  /**
   * Stats upsert
   */
  export type StatsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
    /**
     * The filter to search for the Stats to update in case it exists.
     * 
    **/
    where: StatsWhereUniqueInput
    /**
     * In case the Stats found by the `where` argument doesn't exist, create a new Stats with this data.
     * 
    **/
    create: XOR<StatsCreateInput, StatsUncheckedCreateInput>
    /**
     * In case the Stats was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StatsUpdateInput, StatsUncheckedUpdateInput>
  }


  /**
   * Stats delete
   */
  export type StatsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
    /**
     * Filter which Stats to delete.
     * 
    **/
    where: StatsWhereUniqueInput
  }


  /**
   * Stats deleteMany
   */
  export type StatsDeleteManyArgs = {
    /**
     * Filter which Stats to delete
     * 
    **/
    where?: StatsWhereInput
  }


  /**
   * Stats without action
   */
  export type StatsArgs = {
    /**
     * Select specific fields to fetch from the Stats
     * 
    **/
    select?: StatsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StatsInclude | null
  }



  /**
   * Model SavingThrows
   */


  export type AggregateSavingThrows = {
    _count: SavingThrowsCountAggregateOutputType | null
    _avg: SavingThrowsAvgAggregateOutputType | null
    _sum: SavingThrowsSumAggregateOutputType | null
    _min: SavingThrowsMinAggregateOutputType | null
    _max: SavingThrowsMaxAggregateOutputType | null
  }

  export type SavingThrowsAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type SavingThrowsSumAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type SavingThrowsMinAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type SavingThrowsMaxAggregateOutputType = {
    id: number | null
    characterId: number | null
    str: number | null
    dex: number | null
    con: number | null
    int: number | null
    wis: number | null
    cha: number | null
  }

  export type SavingThrowsCountAggregateOutputType = {
    id: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
    _all: number
  }


  export type SavingThrowsAvgAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type SavingThrowsSumAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type SavingThrowsMinAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type SavingThrowsMaxAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
  }

  export type SavingThrowsCountAggregateInputType = {
    id?: true
    characterId?: true
    str?: true
    dex?: true
    con?: true
    int?: true
    wis?: true
    cha?: true
    _all?: true
  }

  export type SavingThrowsAggregateArgs = {
    /**
     * Filter which SavingThrows to aggregate.
     * 
    **/
    where?: SavingThrowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavingThrows to fetch.
     * 
    **/
    orderBy?: Enumerable<SavingThrowsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SavingThrowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavingThrows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavingThrows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SavingThrows
    **/
    _count?: true | SavingThrowsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SavingThrowsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SavingThrowsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavingThrowsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavingThrowsMaxAggregateInputType
  }

  export type GetSavingThrowsAggregateType<T extends SavingThrowsAggregateArgs> = {
        [P in keyof T & keyof AggregateSavingThrows]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavingThrows[P]>
      : GetScalarType<T[P], AggregateSavingThrows[P]>
  }




  export type SavingThrowsGroupByArgs = {
    where?: SavingThrowsWhereInput
    orderBy?: Enumerable<SavingThrowsOrderByWithAggregationInput>
    by: Array<SavingThrowsScalarFieldEnum>
    having?: SavingThrowsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavingThrowsCountAggregateInputType | true
    _avg?: SavingThrowsAvgAggregateInputType
    _sum?: SavingThrowsSumAggregateInputType
    _min?: SavingThrowsMinAggregateInputType
    _max?: SavingThrowsMaxAggregateInputType
  }


  export type SavingThrowsGroupByOutputType = {
    id: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
    _count: SavingThrowsCountAggregateOutputType | null
    _avg: SavingThrowsAvgAggregateOutputType | null
    _sum: SavingThrowsSumAggregateOutputType | null
    _min: SavingThrowsMinAggregateOutputType | null
    _max: SavingThrowsMaxAggregateOutputType | null
  }

  type GetSavingThrowsGroupByPayload<T extends SavingThrowsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SavingThrowsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavingThrowsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavingThrowsGroupByOutputType[P]>
            : GetScalarType<T[P], SavingThrowsGroupByOutputType[P]>
        }
      >
    >


  export type SavingThrowsSelect = {
    id?: boolean
    characterId?: boolean
    character?: boolean | CharacterArgs
    str?: boolean
    dex?: boolean
    con?: boolean
    int?: boolean
    wis?: boolean
    cha?: boolean
  }

  export type SavingThrowsInclude = {
    character?: boolean | CharacterArgs
  }

  export type SavingThrowsGetPayload<
    S extends boolean | null | undefined | SavingThrowsArgs,
    U = keyof S
      > = S extends true
        ? SavingThrows
    : S extends undefined
    ? never
    : S extends SavingThrowsArgs | SavingThrowsFindManyArgs
    ?'include' extends U
    ? SavingThrows  & {
    [P in TrueKeys<S['include']>]:
        P extends 'character' ? CharacterGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'character' ? CharacterGetPayload<S['select'][P]> :  P extends keyof SavingThrows ? SavingThrows[P] : never
  } 
    : SavingThrows
  : SavingThrows


  type SavingThrowsCountArgs = Merge<
    Omit<SavingThrowsFindManyArgs, 'select' | 'include'> & {
      select?: SavingThrowsCountAggregateInputType | true
    }
  >

  export interface SavingThrowsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one SavingThrows that matches the filter.
     * @param {SavingThrowsFindUniqueArgs} args - Arguments to find a SavingThrows
     * @example
     * // Get one SavingThrows
     * const savingThrows = await prisma.savingThrows.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SavingThrowsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SavingThrowsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'SavingThrows'> extends True ? CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows>, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T>>> : CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows | null >, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T> | null >>

    /**
     * Find the first SavingThrows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavingThrowsFindFirstArgs} args - Arguments to find a SavingThrows
     * @example
     * // Get one SavingThrows
     * const savingThrows = await prisma.savingThrows.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SavingThrowsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SavingThrowsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'SavingThrows'> extends True ? CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows>, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T>>> : CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows | null >, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T> | null >>

    /**
     * Find zero or more SavingThrows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavingThrowsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavingThrows
     * const savingThrows = await prisma.savingThrows.findMany()
     * 
     * // Get first 10 SavingThrows
     * const savingThrows = await prisma.savingThrows.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savingThrowsWithIdOnly = await prisma.savingThrows.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SavingThrowsFindManyArgs>(
      args?: SelectSubset<T, SavingThrowsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<SavingThrows>>, PrismaPromise<Array<SavingThrowsGetPayload<T>>>>

    /**
     * Create a SavingThrows.
     * @param {SavingThrowsCreateArgs} args - Arguments to create a SavingThrows.
     * @example
     * // Create one SavingThrows
     * const SavingThrows = await prisma.savingThrows.create({
     *   data: {
     *     // ... data to create a SavingThrows
     *   }
     * })
     * 
    **/
    create<T extends SavingThrowsCreateArgs>(
      args: SelectSubset<T, SavingThrowsCreateArgs>
    ): CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows>, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T>>>

    /**
     * Create many SavingThrows.
     *     @param {SavingThrowsCreateManyArgs} args - Arguments to create many SavingThrows.
     *     @example
     *     // Create many SavingThrows
     *     const savingThrows = await prisma.savingThrows.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SavingThrowsCreateManyArgs>(
      args?: SelectSubset<T, SavingThrowsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a SavingThrows.
     * @param {SavingThrowsDeleteArgs} args - Arguments to delete one SavingThrows.
     * @example
     * // Delete one SavingThrows
     * const SavingThrows = await prisma.savingThrows.delete({
     *   where: {
     *     // ... filter to delete one SavingThrows
     *   }
     * })
     * 
    **/
    delete<T extends SavingThrowsDeleteArgs>(
      args: SelectSubset<T, SavingThrowsDeleteArgs>
    ): CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows>, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T>>>

    /**
     * Update one SavingThrows.
     * @param {SavingThrowsUpdateArgs} args - Arguments to update one SavingThrows.
     * @example
     * // Update one SavingThrows
     * const savingThrows = await prisma.savingThrows.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SavingThrowsUpdateArgs>(
      args: SelectSubset<T, SavingThrowsUpdateArgs>
    ): CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows>, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T>>>

    /**
     * Delete zero or more SavingThrows.
     * @param {SavingThrowsDeleteManyArgs} args - Arguments to filter SavingThrows to delete.
     * @example
     * // Delete a few SavingThrows
     * const { count } = await prisma.savingThrows.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SavingThrowsDeleteManyArgs>(
      args?: SelectSubset<T, SavingThrowsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavingThrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavingThrowsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavingThrows
     * const savingThrows = await prisma.savingThrows.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SavingThrowsUpdateManyArgs>(
      args: SelectSubset<T, SavingThrowsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one SavingThrows.
     * @param {SavingThrowsUpsertArgs} args - Arguments to update or create a SavingThrows.
     * @example
     * // Update or create a SavingThrows
     * const savingThrows = await prisma.savingThrows.upsert({
     *   create: {
     *     // ... data to create a SavingThrows
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavingThrows we want to update
     *   }
     * })
    **/
    upsert<T extends SavingThrowsUpsertArgs>(
      args: SelectSubset<T, SavingThrowsUpsertArgs>
    ): CheckSelect<T, Prisma__SavingThrowsClient<SavingThrows>, Prisma__SavingThrowsClient<SavingThrowsGetPayload<T>>>

    /**
     * Count the number of SavingThrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavingThrowsCountArgs} args - Arguments to filter SavingThrows to count.
     * @example
     * // Count the number of SavingThrows
     * const count = await prisma.savingThrows.count({
     *   where: {
     *     // ... the filter for the SavingThrows we want to count
     *   }
     * })
    **/
    count<T extends SavingThrowsCountArgs>(
      args?: Subset<T, SavingThrowsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavingThrowsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavingThrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavingThrowsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavingThrowsAggregateArgs>(args: Subset<T, SavingThrowsAggregateArgs>): PrismaPromise<GetSavingThrowsAggregateType<T>>

    /**
     * Group by SavingThrows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavingThrowsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SavingThrowsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SavingThrowsGroupByArgs['orderBy'] }
        : { orderBy?: SavingThrowsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SavingThrowsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavingThrowsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for SavingThrows.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SavingThrowsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    character<T extends CharacterArgs = {}>(args?: Subset<T, CharacterArgs>): CheckSelect<T, Prisma__CharacterClient<Character | null >, Prisma__CharacterClient<CharacterGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * SavingThrows findUnique
   */
  export type SavingThrowsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
    /**
     * Throw an Error if a SavingThrows can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SavingThrows to fetch.
     * 
    **/
    where: SavingThrowsWhereUniqueInput
  }


  /**
   * SavingThrows findFirst
   */
  export type SavingThrowsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
    /**
     * Throw an Error if a SavingThrows can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which SavingThrows to fetch.
     * 
    **/
    where?: SavingThrowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavingThrows to fetch.
     * 
    **/
    orderBy?: Enumerable<SavingThrowsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SavingThrows.
     * 
    **/
    cursor?: SavingThrowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavingThrows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavingThrows.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SavingThrows.
     * 
    **/
    distinct?: Enumerable<SavingThrowsScalarFieldEnum>
  }


  /**
   * SavingThrows findMany
   */
  export type SavingThrowsFindManyArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
    /**
     * Filter, which SavingThrows to fetch.
     * 
    **/
    where?: SavingThrowsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SavingThrows to fetch.
     * 
    **/
    orderBy?: Enumerable<SavingThrowsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SavingThrows.
     * 
    **/
    cursor?: SavingThrowsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SavingThrows from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SavingThrows.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SavingThrowsScalarFieldEnum>
  }


  /**
   * SavingThrows create
   */
  export type SavingThrowsCreateArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
    /**
     * The data needed to create a SavingThrows.
     * 
    **/
    data: XOR<SavingThrowsCreateInput, SavingThrowsUncheckedCreateInput>
  }


  /**
   * SavingThrows createMany
   */
  export type SavingThrowsCreateManyArgs = {
    /**
     * The data used to create many SavingThrows.
     * 
    **/
    data: Enumerable<SavingThrowsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * SavingThrows update
   */
  export type SavingThrowsUpdateArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
    /**
     * The data needed to update a SavingThrows.
     * 
    **/
    data: XOR<SavingThrowsUpdateInput, SavingThrowsUncheckedUpdateInput>
    /**
     * Choose, which SavingThrows to update.
     * 
    **/
    where: SavingThrowsWhereUniqueInput
  }


  /**
   * SavingThrows updateMany
   */
  export type SavingThrowsUpdateManyArgs = {
    /**
     * The data used to update SavingThrows.
     * 
    **/
    data: XOR<SavingThrowsUpdateManyMutationInput, SavingThrowsUncheckedUpdateManyInput>
    /**
     * Filter which SavingThrows to update
     * 
    **/
    where?: SavingThrowsWhereInput
  }


  /**
   * SavingThrows upsert
   */
  export type SavingThrowsUpsertArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
    /**
     * The filter to search for the SavingThrows to update in case it exists.
     * 
    **/
    where: SavingThrowsWhereUniqueInput
    /**
     * In case the SavingThrows found by the `where` argument doesn't exist, create a new SavingThrows with this data.
     * 
    **/
    create: XOR<SavingThrowsCreateInput, SavingThrowsUncheckedCreateInput>
    /**
     * In case the SavingThrows was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SavingThrowsUpdateInput, SavingThrowsUncheckedUpdateInput>
  }


  /**
   * SavingThrows delete
   */
  export type SavingThrowsDeleteArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
    /**
     * Filter which SavingThrows to delete.
     * 
    **/
    where: SavingThrowsWhereUniqueInput
  }


  /**
   * SavingThrows deleteMany
   */
  export type SavingThrowsDeleteManyArgs = {
    /**
     * Filter which SavingThrows to delete
     * 
    **/
    where?: SavingThrowsWhereInput
  }


  /**
   * SavingThrows without action
   */
  export type SavingThrowsArgs = {
    /**
     * Select specific fields to fetch from the SavingThrows
     * 
    **/
    select?: SavingThrowsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SavingThrowsInclude | null
  }



  /**
   * Model Skills
   */


  export type AggregateSkills = {
    _count: SkillsCountAggregateOutputType | null
    _avg: SkillsAvgAggregateOutputType | null
    _sum: SkillsSumAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  export type SkillsAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
    acrobatics: number | null
    animHand: number | null
    arcane: number | null
    athl: number | null
    decep: number | null
    hist: number | null
    insight: number | null
    intimid: number | null
    invest: number | null
    med: number | null
    nature: number | null
    percep: number | null
    perf: number | null
    pers: number | null
    religion: number | null
    sOfH: number | null
    stealth: number | null
    surv: number | null
  }

  export type SkillsSumAggregateOutputType = {
    id: number | null
    characterId: number | null
    acrobatics: number | null
    animHand: number | null
    arcane: number | null
    athl: number | null
    decep: number | null
    hist: number | null
    insight: number | null
    intimid: number | null
    invest: number | null
    med: number | null
    nature: number | null
    percep: number | null
    perf: number | null
    pers: number | null
    religion: number | null
    sOfH: number | null
    stealth: number | null
    surv: number | null
  }

  export type SkillsMinAggregateOutputType = {
    id: number | null
    characterId: number | null
    acrobatics: number | null
    animHand: number | null
    arcane: number | null
    athl: number | null
    decep: number | null
    hist: number | null
    insight: number | null
    intimid: number | null
    invest: number | null
    med: number | null
    nature: number | null
    percep: number | null
    perf: number | null
    pers: number | null
    religion: number | null
    sOfH: number | null
    stealth: number | null
    surv: number | null
  }

  export type SkillsMaxAggregateOutputType = {
    id: number | null
    characterId: number | null
    acrobatics: number | null
    animHand: number | null
    arcane: number | null
    athl: number | null
    decep: number | null
    hist: number | null
    insight: number | null
    intimid: number | null
    invest: number | null
    med: number | null
    nature: number | null
    percep: number | null
    perf: number | null
    pers: number | null
    religion: number | null
    sOfH: number | null
    stealth: number | null
    surv: number | null
  }

  export type SkillsCountAggregateOutputType = {
    id: number
    characterId: number
    acrobatics: number
    animHand: number
    arcane: number
    athl: number
    decep: number
    hist: number
    insight: number
    intimid: number
    invest: number
    med: number
    nature: number
    percep: number
    perf: number
    pers: number
    religion: number
    sOfH: number
    stealth: number
    surv: number
    _all: number
  }


  export type SkillsAvgAggregateInputType = {
    id?: true
    characterId?: true
    acrobatics?: true
    animHand?: true
    arcane?: true
    athl?: true
    decep?: true
    hist?: true
    insight?: true
    intimid?: true
    invest?: true
    med?: true
    nature?: true
    percep?: true
    perf?: true
    pers?: true
    religion?: true
    sOfH?: true
    stealth?: true
    surv?: true
  }

  export type SkillsSumAggregateInputType = {
    id?: true
    characterId?: true
    acrobatics?: true
    animHand?: true
    arcane?: true
    athl?: true
    decep?: true
    hist?: true
    insight?: true
    intimid?: true
    invest?: true
    med?: true
    nature?: true
    percep?: true
    perf?: true
    pers?: true
    religion?: true
    sOfH?: true
    stealth?: true
    surv?: true
  }

  export type SkillsMinAggregateInputType = {
    id?: true
    characterId?: true
    acrobatics?: true
    animHand?: true
    arcane?: true
    athl?: true
    decep?: true
    hist?: true
    insight?: true
    intimid?: true
    invest?: true
    med?: true
    nature?: true
    percep?: true
    perf?: true
    pers?: true
    religion?: true
    sOfH?: true
    stealth?: true
    surv?: true
  }

  export type SkillsMaxAggregateInputType = {
    id?: true
    characterId?: true
    acrobatics?: true
    animHand?: true
    arcane?: true
    athl?: true
    decep?: true
    hist?: true
    insight?: true
    intimid?: true
    invest?: true
    med?: true
    nature?: true
    percep?: true
    perf?: true
    pers?: true
    religion?: true
    sOfH?: true
    stealth?: true
    surv?: true
  }

  export type SkillsCountAggregateInputType = {
    id?: true
    characterId?: true
    acrobatics?: true
    animHand?: true
    arcane?: true
    athl?: true
    decep?: true
    hist?: true
    insight?: true
    intimid?: true
    invest?: true
    med?: true
    nature?: true
    percep?: true
    perf?: true
    pers?: true
    religion?: true
    sOfH?: true
    stealth?: true
    surv?: true
    _all?: true
  }

  export type SkillsAggregateArgs = {
    /**
     * Filter which Skills to aggregate.
     * 
    **/
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skills
    **/
    _count?: true | SkillsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkillsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkillsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkillsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkillsMaxAggregateInputType
  }

  export type GetSkillsAggregateType<T extends SkillsAggregateArgs> = {
        [P in keyof T & keyof AggregateSkills]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkills[P]>
      : GetScalarType<T[P], AggregateSkills[P]>
  }




  export type SkillsGroupByArgs = {
    where?: SkillsWhereInput
    orderBy?: Enumerable<SkillsOrderByWithAggregationInput>
    by: Array<SkillsScalarFieldEnum>
    having?: SkillsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkillsCountAggregateInputType | true
    _avg?: SkillsAvgAggregateInputType
    _sum?: SkillsSumAggregateInputType
    _min?: SkillsMinAggregateInputType
    _max?: SkillsMaxAggregateInputType
  }


  export type SkillsGroupByOutputType = {
    id: number
    characterId: number
    acrobatics: number
    animHand: number
    arcane: number
    athl: number
    decep: number
    hist: number
    insight: number
    intimid: number
    invest: number
    med: number
    nature: number
    percep: number
    perf: number
    pers: number
    religion: number
    sOfH: number
    stealth: number
    surv: number
    _count: SkillsCountAggregateOutputType | null
    _avg: SkillsAvgAggregateOutputType | null
    _sum: SkillsSumAggregateOutputType | null
    _min: SkillsMinAggregateOutputType | null
    _max: SkillsMaxAggregateOutputType | null
  }

  type GetSkillsGroupByPayload<T extends SkillsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SkillsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkillsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkillsGroupByOutputType[P]>
            : GetScalarType<T[P], SkillsGroupByOutputType[P]>
        }
      >
    >


  export type SkillsSelect = {
    id?: boolean
    characterId?: boolean
    character?: boolean | CharacterArgs
    acrobatics?: boolean
    animHand?: boolean
    arcane?: boolean
    athl?: boolean
    decep?: boolean
    hist?: boolean
    insight?: boolean
    intimid?: boolean
    invest?: boolean
    med?: boolean
    nature?: boolean
    percep?: boolean
    perf?: boolean
    pers?: boolean
    religion?: boolean
    sOfH?: boolean
    stealth?: boolean
    surv?: boolean
  }

  export type SkillsInclude = {
    character?: boolean | CharacterArgs
  }

  export type SkillsGetPayload<
    S extends boolean | null | undefined | SkillsArgs,
    U = keyof S
      > = S extends true
        ? Skills
    : S extends undefined
    ? never
    : S extends SkillsArgs | SkillsFindManyArgs
    ?'include' extends U
    ? Skills  & {
    [P in TrueKeys<S['include']>]:
        P extends 'character' ? CharacterGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'character' ? CharacterGetPayload<S['select'][P]> :  P extends keyof Skills ? Skills[P] : never
  } 
    : Skills
  : Skills


  type SkillsCountArgs = Merge<
    Omit<SkillsFindManyArgs, 'select' | 'include'> & {
      select?: SkillsCountAggregateInputType | true
    }
  >

  export interface SkillsDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Skills that matches the filter.
     * @param {SkillsFindUniqueArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkillsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SkillsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Skills'> extends True ? CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>> : CheckSelect<T, Prisma__SkillsClient<Skills | null >, Prisma__SkillsClient<SkillsGetPayload<T> | null >>

    /**
     * Find the first Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindFirstArgs} args - Arguments to find a Skills
     * @example
     * // Get one Skills
     * const skills = await prisma.skills.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkillsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SkillsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Skills'> extends True ? CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>> : CheckSelect<T, Prisma__SkillsClient<Skills | null >, Prisma__SkillsClient<SkillsGetPayload<T> | null >>

    /**
     * Find zero or more Skills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skills
     * const skills = await prisma.skills.findMany()
     * 
     * // Get first 10 Skills
     * const skills = await prisma.skills.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skillsWithIdOnly = await prisma.skills.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SkillsFindManyArgs>(
      args?: SelectSubset<T, SkillsFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Skills>>, PrismaPromise<Array<SkillsGetPayload<T>>>>

    /**
     * Create a Skills.
     * @param {SkillsCreateArgs} args - Arguments to create a Skills.
     * @example
     * // Create one Skills
     * const Skills = await prisma.skills.create({
     *   data: {
     *     // ... data to create a Skills
     *   }
     * })
     * 
    **/
    create<T extends SkillsCreateArgs>(
      args: SelectSubset<T, SkillsCreateArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Create many Skills.
     *     @param {SkillsCreateManyArgs} args - Arguments to create many Skills.
     *     @example
     *     // Create many Skills
     *     const skills = await prisma.skills.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkillsCreateManyArgs>(
      args?: SelectSubset<T, SkillsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Skills.
     * @param {SkillsDeleteArgs} args - Arguments to delete one Skills.
     * @example
     * // Delete one Skills
     * const Skills = await prisma.skills.delete({
     *   where: {
     *     // ... filter to delete one Skills
     *   }
     * })
     * 
    **/
    delete<T extends SkillsDeleteArgs>(
      args: SelectSubset<T, SkillsDeleteArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Update one Skills.
     * @param {SkillsUpdateArgs} args - Arguments to update one Skills.
     * @example
     * // Update one Skills
     * const skills = await prisma.skills.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkillsUpdateArgs>(
      args: SelectSubset<T, SkillsUpdateArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Delete zero or more Skills.
     * @param {SkillsDeleteManyArgs} args - Arguments to filter Skills to delete.
     * @example
     * // Delete a few Skills
     * const { count } = await prisma.skills.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkillsDeleteManyArgs>(
      args?: SelectSubset<T, SkillsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skills
     * const skills = await prisma.skills.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkillsUpdateManyArgs>(
      args: SelectSubset<T, SkillsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Skills.
     * @param {SkillsUpsertArgs} args - Arguments to update or create a Skills.
     * @example
     * // Update or create a Skills
     * const skills = await prisma.skills.upsert({
     *   create: {
     *     // ... data to create a Skills
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skills we want to update
     *   }
     * })
    **/
    upsert<T extends SkillsUpsertArgs>(
      args: SelectSubset<T, SkillsUpsertArgs>
    ): CheckSelect<T, Prisma__SkillsClient<Skills>, Prisma__SkillsClient<SkillsGetPayload<T>>>

    /**
     * Count the number of Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsCountArgs} args - Arguments to filter Skills to count.
     * @example
     * // Count the number of Skills
     * const count = await prisma.skills.count({
     *   where: {
     *     // ... the filter for the Skills we want to count
     *   }
     * })
    **/
    count<T extends SkillsCountArgs>(
      args?: Subset<T, SkillsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkillsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkillsAggregateArgs>(args: Subset<T, SkillsAggregateArgs>): PrismaPromise<GetSkillsAggregateType<T>>

    /**
     * Group by Skills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkillsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkillsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkillsGroupByArgs['orderBy'] }
        : { orderBy?: SkillsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkillsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkillsGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skills.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SkillsClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    character<T extends CharacterArgs = {}>(args?: Subset<T, CharacterArgs>): CheckSelect<T, Prisma__CharacterClient<Character | null >, Prisma__CharacterClient<CharacterGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Skills findUnique
   */
  export type SkillsFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Throw an Error if a Skills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills findFirst
   */
  export type SkillsFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Throw an Error if a Skills can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skills.
     * 
    **/
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skills.
     * 
    **/
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }


  /**
   * Skills findMany
   */
  export type SkillsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Filter, which Skills to fetch.
     * 
    **/
    where?: SkillsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skills to fetch.
     * 
    **/
    orderBy?: Enumerable<SkillsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skills.
     * 
    **/
    cursor?: SkillsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skills from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skills.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SkillsScalarFieldEnum>
  }


  /**
   * Skills create
   */
  export type SkillsCreateArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * The data needed to create a Skills.
     * 
    **/
    data: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
  }


  /**
   * Skills createMany
   */
  export type SkillsCreateManyArgs = {
    /**
     * The data used to create many Skills.
     * 
    **/
    data: Enumerable<SkillsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Skills update
   */
  export type SkillsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * The data needed to update a Skills.
     * 
    **/
    data: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
    /**
     * Choose, which Skills to update.
     * 
    **/
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills updateMany
   */
  export type SkillsUpdateManyArgs = {
    /**
     * The data used to update Skills.
     * 
    **/
    data: XOR<SkillsUpdateManyMutationInput, SkillsUncheckedUpdateManyInput>
    /**
     * Filter which Skills to update
     * 
    **/
    where?: SkillsWhereInput
  }


  /**
   * Skills upsert
   */
  export type SkillsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * The filter to search for the Skills to update in case it exists.
     * 
    **/
    where: SkillsWhereUniqueInput
    /**
     * In case the Skills found by the `where` argument doesn't exist, create a new Skills with this data.
     * 
    **/
    create: XOR<SkillsCreateInput, SkillsUncheckedCreateInput>
    /**
     * In case the Skills was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SkillsUpdateInput, SkillsUncheckedUpdateInput>
  }


  /**
   * Skills delete
   */
  export type SkillsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
    /**
     * Filter which Skills to delete.
     * 
    **/
    where: SkillsWhereUniqueInput
  }


  /**
   * Skills deleteMany
   */
  export type SkillsDeleteManyArgs = {
    /**
     * Filter which Skills to delete
     * 
    **/
    where?: SkillsWhereInput
  }


  /**
   * Skills without action
   */
  export type SkillsArgs = {
    /**
     * Select specific fields to fetch from the Skills
     * 
    **/
    select?: SkillsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkillsInclude | null
  }



  /**
   * Model Combat
   */


  export type AggregateCombat = {
    _count: CombatCountAggregateOutputType | null
    _avg: CombatAvgAggregateOutputType | null
    _sum: CombatSumAggregateOutputType | null
    _min: CombatMinAggregateOutputType | null
    _max: CombatMaxAggregateOutputType | null
  }

  export type CombatAvgAggregateOutputType = {
    id: number | null
    characterId: number | null
    hpMax: number | null
    ac: number | null
    speed: number | null
  }

  export type CombatSumAggregateOutputType = {
    id: number | null
    characterId: number | null
    hpMax: number | null
    ac: number | null
    speed: number | null
  }

  export type CombatMinAggregateOutputType = {
    id: number | null
    characterId: number | null
    hpMax: number | null
    ac: number | null
    speed: number | null
    hitDice: string | null
  }

  export type CombatMaxAggregateOutputType = {
    id: number | null
    characterId: number | null
    hpMax: number | null
    ac: number | null
    speed: number | null
    hitDice: string | null
  }

  export type CombatCountAggregateOutputType = {
    id: number
    characterId: number
    hpMax: number
    ac: number
    speed: number
    hitDice: number
    _all: number
  }


  export type CombatAvgAggregateInputType = {
    id?: true
    characterId?: true
    hpMax?: true
    ac?: true
    speed?: true
  }

  export type CombatSumAggregateInputType = {
    id?: true
    characterId?: true
    hpMax?: true
    ac?: true
    speed?: true
  }

  export type CombatMinAggregateInputType = {
    id?: true
    characterId?: true
    hpMax?: true
    ac?: true
    speed?: true
    hitDice?: true
  }

  export type CombatMaxAggregateInputType = {
    id?: true
    characterId?: true
    hpMax?: true
    ac?: true
    speed?: true
    hitDice?: true
  }

  export type CombatCountAggregateInputType = {
    id?: true
    characterId?: true
    hpMax?: true
    ac?: true
    speed?: true
    hitDice?: true
    _all?: true
  }

  export type CombatAggregateArgs = {
    /**
     * Filter which Combat to aggregate.
     * 
    **/
    where?: CombatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Combats to fetch.
     * 
    **/
    orderBy?: Enumerable<CombatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CombatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Combats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Combats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Combats
    **/
    _count?: true | CombatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CombatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CombatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CombatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CombatMaxAggregateInputType
  }

  export type GetCombatAggregateType<T extends CombatAggregateArgs> = {
        [P in keyof T & keyof AggregateCombat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCombat[P]>
      : GetScalarType<T[P], AggregateCombat[P]>
  }




  export type CombatGroupByArgs = {
    where?: CombatWhereInput
    orderBy?: Enumerable<CombatOrderByWithAggregationInput>
    by: Array<CombatScalarFieldEnum>
    having?: CombatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CombatCountAggregateInputType | true
    _avg?: CombatAvgAggregateInputType
    _sum?: CombatSumAggregateInputType
    _min?: CombatMinAggregateInputType
    _max?: CombatMaxAggregateInputType
  }


  export type CombatGroupByOutputType = {
    id: number
    characterId: number
    hpMax: number
    ac: number
    speed: number
    hitDice: string
    _count: CombatCountAggregateOutputType | null
    _avg: CombatAvgAggregateOutputType | null
    _sum: CombatSumAggregateOutputType | null
    _min: CombatMinAggregateOutputType | null
    _max: CombatMaxAggregateOutputType | null
  }

  type GetCombatGroupByPayload<T extends CombatGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CombatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CombatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CombatGroupByOutputType[P]>
            : GetScalarType<T[P], CombatGroupByOutputType[P]>
        }
      >
    >


  export type CombatSelect = {
    id?: boolean
    characterId?: boolean
    character?: boolean | CharacterArgs
    hpMax?: boolean
    ac?: boolean
    speed?: boolean
    hitDice?: boolean
  }

  export type CombatInclude = {
    character?: boolean | CharacterArgs
  }

  export type CombatGetPayload<
    S extends boolean | null | undefined | CombatArgs,
    U = keyof S
      > = S extends true
        ? Combat
    : S extends undefined
    ? never
    : S extends CombatArgs | CombatFindManyArgs
    ?'include' extends U
    ? Combat  & {
    [P in TrueKeys<S['include']>]:
        P extends 'character' ? CharacterGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'character' ? CharacterGetPayload<S['select'][P]> :  P extends keyof Combat ? Combat[P] : never
  } 
    : Combat
  : Combat


  type CombatCountArgs = Merge<
    Omit<CombatFindManyArgs, 'select' | 'include'> & {
      select?: CombatCountAggregateInputType | true
    }
  >

  export interface CombatDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Combat that matches the filter.
     * @param {CombatFindUniqueArgs} args - Arguments to find a Combat
     * @example
     * // Get one Combat
     * const combat = await prisma.combat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CombatFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CombatFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Combat'> extends True ? CheckSelect<T, Prisma__CombatClient<Combat>, Prisma__CombatClient<CombatGetPayload<T>>> : CheckSelect<T, Prisma__CombatClient<Combat | null >, Prisma__CombatClient<CombatGetPayload<T> | null >>

    /**
     * Find the first Combat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombatFindFirstArgs} args - Arguments to find a Combat
     * @example
     * // Get one Combat
     * const combat = await prisma.combat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CombatFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CombatFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Combat'> extends True ? CheckSelect<T, Prisma__CombatClient<Combat>, Prisma__CombatClient<CombatGetPayload<T>>> : CheckSelect<T, Prisma__CombatClient<Combat | null >, Prisma__CombatClient<CombatGetPayload<T> | null >>

    /**
     * Find zero or more Combats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Combats
     * const combats = await prisma.combat.findMany()
     * 
     * // Get first 10 Combats
     * const combats = await prisma.combat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const combatWithIdOnly = await prisma.combat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CombatFindManyArgs>(
      args?: SelectSubset<T, CombatFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Combat>>, PrismaPromise<Array<CombatGetPayload<T>>>>

    /**
     * Create a Combat.
     * @param {CombatCreateArgs} args - Arguments to create a Combat.
     * @example
     * // Create one Combat
     * const Combat = await prisma.combat.create({
     *   data: {
     *     // ... data to create a Combat
     *   }
     * })
     * 
    **/
    create<T extends CombatCreateArgs>(
      args: SelectSubset<T, CombatCreateArgs>
    ): CheckSelect<T, Prisma__CombatClient<Combat>, Prisma__CombatClient<CombatGetPayload<T>>>

    /**
     * Create many Combats.
     *     @param {CombatCreateManyArgs} args - Arguments to create many Combats.
     *     @example
     *     // Create many Combats
     *     const combat = await prisma.combat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CombatCreateManyArgs>(
      args?: SelectSubset<T, CombatCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Combat.
     * @param {CombatDeleteArgs} args - Arguments to delete one Combat.
     * @example
     * // Delete one Combat
     * const Combat = await prisma.combat.delete({
     *   where: {
     *     // ... filter to delete one Combat
     *   }
     * })
     * 
    **/
    delete<T extends CombatDeleteArgs>(
      args: SelectSubset<T, CombatDeleteArgs>
    ): CheckSelect<T, Prisma__CombatClient<Combat>, Prisma__CombatClient<CombatGetPayload<T>>>

    /**
     * Update one Combat.
     * @param {CombatUpdateArgs} args - Arguments to update one Combat.
     * @example
     * // Update one Combat
     * const combat = await prisma.combat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CombatUpdateArgs>(
      args: SelectSubset<T, CombatUpdateArgs>
    ): CheckSelect<T, Prisma__CombatClient<Combat>, Prisma__CombatClient<CombatGetPayload<T>>>

    /**
     * Delete zero or more Combats.
     * @param {CombatDeleteManyArgs} args - Arguments to filter Combats to delete.
     * @example
     * // Delete a few Combats
     * const { count } = await prisma.combat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CombatDeleteManyArgs>(
      args?: SelectSubset<T, CombatDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Combats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Combats
     * const combat = await prisma.combat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CombatUpdateManyArgs>(
      args: SelectSubset<T, CombatUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Combat.
     * @param {CombatUpsertArgs} args - Arguments to update or create a Combat.
     * @example
     * // Update or create a Combat
     * const combat = await prisma.combat.upsert({
     *   create: {
     *     // ... data to create a Combat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Combat we want to update
     *   }
     * })
    **/
    upsert<T extends CombatUpsertArgs>(
      args: SelectSubset<T, CombatUpsertArgs>
    ): CheckSelect<T, Prisma__CombatClient<Combat>, Prisma__CombatClient<CombatGetPayload<T>>>

    /**
     * Count the number of Combats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombatCountArgs} args - Arguments to filter Combats to count.
     * @example
     * // Count the number of Combats
     * const count = await prisma.combat.count({
     *   where: {
     *     // ... the filter for the Combats we want to count
     *   }
     * })
    **/
    count<T extends CombatCountArgs>(
      args?: Subset<T, CombatCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CombatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Combat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CombatAggregateArgs>(args: Subset<T, CombatAggregateArgs>): PrismaPromise<GetCombatAggregateType<T>>

    /**
     * Group by Combat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CombatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CombatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CombatGroupByArgs['orderBy'] }
        : { orderBy?: CombatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CombatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCombatGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Combat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CombatClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    character<T extends CharacterArgs = {}>(args?: Subset<T, CharacterArgs>): CheckSelect<T, Prisma__CharacterClient<Character | null >, Prisma__CharacterClient<CharacterGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Combat findUnique
   */
  export type CombatFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
    /**
     * Throw an Error if a Combat can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Combat to fetch.
     * 
    **/
    where: CombatWhereUniqueInput
  }


  /**
   * Combat findFirst
   */
  export type CombatFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
    /**
     * Throw an Error if a Combat can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Combat to fetch.
     * 
    **/
    where?: CombatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Combats to fetch.
     * 
    **/
    orderBy?: Enumerable<CombatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Combats.
     * 
    **/
    cursor?: CombatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Combats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Combats.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Combats.
     * 
    **/
    distinct?: Enumerable<CombatScalarFieldEnum>
  }


  /**
   * Combat findMany
   */
  export type CombatFindManyArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
    /**
     * Filter, which Combats to fetch.
     * 
    **/
    where?: CombatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Combats to fetch.
     * 
    **/
    orderBy?: Enumerable<CombatOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Combats.
     * 
    **/
    cursor?: CombatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Combats from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Combats.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CombatScalarFieldEnum>
  }


  /**
   * Combat create
   */
  export type CombatCreateArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
    /**
     * The data needed to create a Combat.
     * 
    **/
    data: XOR<CombatCreateInput, CombatUncheckedCreateInput>
  }


  /**
   * Combat createMany
   */
  export type CombatCreateManyArgs = {
    /**
     * The data used to create many Combats.
     * 
    **/
    data: Enumerable<CombatCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Combat update
   */
  export type CombatUpdateArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
    /**
     * The data needed to update a Combat.
     * 
    **/
    data: XOR<CombatUpdateInput, CombatUncheckedUpdateInput>
    /**
     * Choose, which Combat to update.
     * 
    **/
    where: CombatWhereUniqueInput
  }


  /**
   * Combat updateMany
   */
  export type CombatUpdateManyArgs = {
    /**
     * The data used to update Combats.
     * 
    **/
    data: XOR<CombatUpdateManyMutationInput, CombatUncheckedUpdateManyInput>
    /**
     * Filter which Combats to update
     * 
    **/
    where?: CombatWhereInput
  }


  /**
   * Combat upsert
   */
  export type CombatUpsertArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
    /**
     * The filter to search for the Combat to update in case it exists.
     * 
    **/
    where: CombatWhereUniqueInput
    /**
     * In case the Combat found by the `where` argument doesn't exist, create a new Combat with this data.
     * 
    **/
    create: XOR<CombatCreateInput, CombatUncheckedCreateInput>
    /**
     * In case the Combat was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CombatUpdateInput, CombatUncheckedUpdateInput>
  }


  /**
   * Combat delete
   */
  export type CombatDeleteArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
    /**
     * Filter which Combat to delete.
     * 
    **/
    where: CombatWhereUniqueInput
  }


  /**
   * Combat deleteMany
   */
  export type CombatDeleteManyArgs = {
    /**
     * Filter which Combats to delete
     * 
    **/
    where?: CombatWhereInput
  }


  /**
   * Combat without action
   */
  export type CombatArgs = {
    /**
     * Select specific fields to fetch from the Combat
     * 
    **/
    select?: CombatSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CombatInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CharacterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    player: 'player',
    class: 'class',
    level: 'level',
    background: 'background',
    race: 'race',
    alignment: 'alignment',
    profBonus: 'profBonus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CharacterScalarFieldEnum = (typeof CharacterScalarFieldEnum)[keyof typeof CharacterScalarFieldEnum]


  export const CombatScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    hpMax: 'hpMax',
    ac: 'ac',
    speed: 'speed',
    hitDice: 'hitDice'
  };

  export type CombatScalarFieldEnum = (typeof CombatScalarFieldEnum)[keyof typeof CombatScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SavingThrowsScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    str: 'str',
    dex: 'dex',
    con: 'con',
    int: 'int',
    wis: 'wis',
    cha: 'cha'
  };

  export type SavingThrowsScalarFieldEnum = (typeof SavingThrowsScalarFieldEnum)[keyof typeof SavingThrowsScalarFieldEnum]


  export const SkillsScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    acrobatics: 'acrobatics',
    animHand: 'animHand',
    arcane: 'arcane',
    athl: 'athl',
    decep: 'decep',
    hist: 'hist',
    insight: 'insight',
    intimid: 'intimid',
    invest: 'invest',
    med: 'med',
    nature: 'nature',
    percep: 'percep',
    perf: 'perf',
    pers: 'pers',
    religion: 'religion',
    sOfH: 'sOfH',
    stealth: 'stealth',
    surv: 'surv'
  };

  export type SkillsScalarFieldEnum = (typeof SkillsScalarFieldEnum)[keyof typeof SkillsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StatsScalarFieldEnum: {
    id: 'id',
    characterId: 'characterId',
    str: 'str',
    dex: 'dex',
    con: 'con',
    int: 'int',
    wis: 'wis',
    cha: 'cha'
  };

  export type StatsScalarFieldEnum = (typeof StatsScalarFieldEnum)[keyof typeof StatsScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type CharacterWhereInput = {
    AND?: Enumerable<CharacterWhereInput>
    OR?: Enumerable<CharacterWhereInput>
    NOT?: Enumerable<CharacterWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    player?: StringFilter | string
    class?: StringFilter | string
    level?: IntFilter | number
    background?: StringFilter | string
    race?: StringFilter | string
    alignment?: StringFilter | string
    profBonus?: IntFilter | number
    stats?: XOR<StatsRelationFilter, StatsWhereInput> | null
    savingThrows?: XOR<SavingThrowsRelationFilter, SavingThrowsWhereInput> | null
    skills?: XOR<SkillsRelationFilter, SkillsWhereInput> | null
    combat?: XOR<CombatRelationFilter, CombatWhereInput> | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CharacterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    player?: SortOrder
    class?: SortOrder
    level?: SortOrder
    background?: SortOrder
    race?: SortOrder
    alignment?: SortOrder
    profBonus?: SortOrder
    stats?: StatsOrderByWithRelationInput
    savingThrows?: SavingThrowsOrderByWithRelationInput
    skills?: SkillsOrderByWithRelationInput
    combat?: CombatOrderByWithRelationInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterWhereUniqueInput = {
    id?: number
  }

  export type CharacterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    player?: SortOrder
    class?: SortOrder
    level?: SortOrder
    background?: SortOrder
    race?: SortOrder
    alignment?: SortOrder
    profBonus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CharacterCountOrderByAggregateInput
    _avg?: CharacterAvgOrderByAggregateInput
    _max?: CharacterMaxOrderByAggregateInput
    _min?: CharacterMinOrderByAggregateInput
    _sum?: CharacterSumOrderByAggregateInput
  }

  export type CharacterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CharacterScalarWhereWithAggregatesInput>
    OR?: Enumerable<CharacterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CharacterScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    player?: StringWithAggregatesFilter | string
    class?: StringWithAggregatesFilter | string
    level?: IntWithAggregatesFilter | number
    background?: StringWithAggregatesFilter | string
    race?: StringWithAggregatesFilter | string
    alignment?: StringWithAggregatesFilter | string
    profBonus?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type StatsWhereInput = {
    AND?: Enumerable<StatsWhereInput>
    OR?: Enumerable<StatsWhereInput>
    NOT?: Enumerable<StatsWhereInput>
    id?: IntFilter | number
    characterId?: IntFilter | number
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    str?: IntFilter | number
    dex?: IntFilter | number
    con?: IntFilter | number
    int?: IntFilter | number
    wis?: IntFilter | number
    cha?: IntFilter | number
  }

  export type StatsOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    character?: CharacterOrderByWithRelationInput
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type StatsWhereUniqueInput = {
    id?: number
    characterId?: number
  }

  export type StatsOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
    _count?: StatsCountOrderByAggregateInput
    _avg?: StatsAvgOrderByAggregateInput
    _max?: StatsMaxOrderByAggregateInput
    _min?: StatsMinOrderByAggregateInput
    _sum?: StatsSumOrderByAggregateInput
  }

  export type StatsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StatsScalarWhereWithAggregatesInput>
    OR?: Enumerable<StatsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StatsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    characterId?: IntWithAggregatesFilter | number
    str?: IntWithAggregatesFilter | number
    dex?: IntWithAggregatesFilter | number
    con?: IntWithAggregatesFilter | number
    int?: IntWithAggregatesFilter | number
    wis?: IntWithAggregatesFilter | number
    cha?: IntWithAggregatesFilter | number
  }

  export type SavingThrowsWhereInput = {
    AND?: Enumerable<SavingThrowsWhereInput>
    OR?: Enumerable<SavingThrowsWhereInput>
    NOT?: Enumerable<SavingThrowsWhereInput>
    id?: IntFilter | number
    characterId?: IntFilter | number
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    str?: IntFilter | number
    dex?: IntFilter | number
    con?: IntFilter | number
    int?: IntFilter | number
    wis?: IntFilter | number
    cha?: IntFilter | number
  }

  export type SavingThrowsOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    character?: CharacterOrderByWithRelationInput
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type SavingThrowsWhereUniqueInput = {
    id?: number
    characterId?: number
  }

  export type SavingThrowsOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
    _count?: SavingThrowsCountOrderByAggregateInput
    _avg?: SavingThrowsAvgOrderByAggregateInput
    _max?: SavingThrowsMaxOrderByAggregateInput
    _min?: SavingThrowsMinOrderByAggregateInput
    _sum?: SavingThrowsSumOrderByAggregateInput
  }

  export type SavingThrowsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SavingThrowsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SavingThrowsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SavingThrowsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    characterId?: IntWithAggregatesFilter | number
    str?: IntWithAggregatesFilter | number
    dex?: IntWithAggregatesFilter | number
    con?: IntWithAggregatesFilter | number
    int?: IntWithAggregatesFilter | number
    wis?: IntWithAggregatesFilter | number
    cha?: IntWithAggregatesFilter | number
  }

  export type SkillsWhereInput = {
    AND?: Enumerable<SkillsWhereInput>
    OR?: Enumerable<SkillsWhereInput>
    NOT?: Enumerable<SkillsWhereInput>
    id?: IntFilter | number
    characterId?: IntFilter | number
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    acrobatics?: IntFilter | number
    animHand?: IntFilter | number
    arcane?: IntFilter | number
    athl?: IntFilter | number
    decep?: IntFilter | number
    hist?: IntFilter | number
    insight?: IntFilter | number
    intimid?: IntFilter | number
    invest?: IntFilter | number
    med?: IntFilter | number
    nature?: IntFilter | number
    percep?: IntFilter | number
    perf?: IntFilter | number
    pers?: IntFilter | number
    religion?: IntFilter | number
    sOfH?: IntFilter | number
    stealth?: IntFilter | number
    surv?: IntFilter | number
  }

  export type SkillsOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    character?: CharacterOrderByWithRelationInput
    acrobatics?: SortOrder
    animHand?: SortOrder
    arcane?: SortOrder
    athl?: SortOrder
    decep?: SortOrder
    hist?: SortOrder
    insight?: SortOrder
    intimid?: SortOrder
    invest?: SortOrder
    med?: SortOrder
    nature?: SortOrder
    percep?: SortOrder
    perf?: SortOrder
    pers?: SortOrder
    religion?: SortOrder
    sOfH?: SortOrder
    stealth?: SortOrder
    surv?: SortOrder
  }

  export type SkillsWhereUniqueInput = {
    id?: number
    characterId?: number
  }

  export type SkillsOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    acrobatics?: SortOrder
    animHand?: SortOrder
    arcane?: SortOrder
    athl?: SortOrder
    decep?: SortOrder
    hist?: SortOrder
    insight?: SortOrder
    intimid?: SortOrder
    invest?: SortOrder
    med?: SortOrder
    nature?: SortOrder
    percep?: SortOrder
    perf?: SortOrder
    pers?: SortOrder
    religion?: SortOrder
    sOfH?: SortOrder
    stealth?: SortOrder
    surv?: SortOrder
    _count?: SkillsCountOrderByAggregateInput
    _avg?: SkillsAvgOrderByAggregateInput
    _max?: SkillsMaxOrderByAggregateInput
    _min?: SkillsMinOrderByAggregateInput
    _sum?: SkillsSumOrderByAggregateInput
  }

  export type SkillsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    OR?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SkillsScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    characterId?: IntWithAggregatesFilter | number
    acrobatics?: IntWithAggregatesFilter | number
    animHand?: IntWithAggregatesFilter | number
    arcane?: IntWithAggregatesFilter | number
    athl?: IntWithAggregatesFilter | number
    decep?: IntWithAggregatesFilter | number
    hist?: IntWithAggregatesFilter | number
    insight?: IntWithAggregatesFilter | number
    intimid?: IntWithAggregatesFilter | number
    invest?: IntWithAggregatesFilter | number
    med?: IntWithAggregatesFilter | number
    nature?: IntWithAggregatesFilter | number
    percep?: IntWithAggregatesFilter | number
    perf?: IntWithAggregatesFilter | number
    pers?: IntWithAggregatesFilter | number
    religion?: IntWithAggregatesFilter | number
    sOfH?: IntWithAggregatesFilter | number
    stealth?: IntWithAggregatesFilter | number
    surv?: IntWithAggregatesFilter | number
  }

  export type CombatWhereInput = {
    AND?: Enumerable<CombatWhereInput>
    OR?: Enumerable<CombatWhereInput>
    NOT?: Enumerable<CombatWhereInput>
    id?: IntFilter | number
    characterId?: IntFilter | number
    character?: XOR<CharacterRelationFilter, CharacterWhereInput>
    hpMax?: IntFilter | number
    ac?: IntFilter | number
    speed?: IntFilter | number
    hitDice?: StringFilter | string
  }

  export type CombatOrderByWithRelationInput = {
    id?: SortOrder
    characterId?: SortOrder
    character?: CharacterOrderByWithRelationInput
    hpMax?: SortOrder
    ac?: SortOrder
    speed?: SortOrder
    hitDice?: SortOrder
  }

  export type CombatWhereUniqueInput = {
    id?: number
    characterId?: number
  }

  export type CombatOrderByWithAggregationInput = {
    id?: SortOrder
    characterId?: SortOrder
    hpMax?: SortOrder
    ac?: SortOrder
    speed?: SortOrder
    hitDice?: SortOrder
    _count?: CombatCountOrderByAggregateInput
    _avg?: CombatAvgOrderByAggregateInput
    _max?: CombatMaxOrderByAggregateInput
    _min?: CombatMinOrderByAggregateInput
    _sum?: CombatSumOrderByAggregateInput
  }

  export type CombatScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CombatScalarWhereWithAggregatesInput>
    OR?: Enumerable<CombatScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CombatScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    characterId?: IntWithAggregatesFilter | number
    hpMax?: IntWithAggregatesFilter | number
    ac?: IntWithAggregatesFilter | number
    speed?: IntWithAggregatesFilter | number
    hitDice?: StringWithAggregatesFilter | string
  }

  export type CharacterCreateInput = {
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsCreateNestedOneWithoutCharacterInput
    savingThrows?: SavingThrowsCreateNestedOneWithoutCharacterInput
    skills?: SkillsCreateNestedOneWithoutCharacterInput
    combat?: CombatCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUncheckedCreateInput = {
    id?: number
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsUncheckedCreateNestedOneWithoutCharacterInput
    savingThrows?: SavingThrowsUncheckedCreateNestedOneWithoutCharacterInput
    skills?: SkillsUncheckedCreateNestedOneWithoutCharacterInput
    combat?: CombatUncheckedCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUpdateOneWithoutCharacterNestedInput
    savingThrows?: SavingThrowsUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUpdateOneWithoutCharacterNestedInput
    combat?: CombatUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUncheckedUpdateOneWithoutCharacterNestedInput
    savingThrows?: SavingThrowsUncheckedUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUncheckedUpdateOneWithoutCharacterNestedInput
    combat?: CombatUncheckedUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateManyInput = {
    id?: number
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatsCreateInput = {
    character: CharacterCreateNestedOneWithoutStatsInput
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type StatsUncheckedCreateInput = {
    id?: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type StatsUpdateInput = {
    character?: CharacterUpdateOneRequiredWithoutStatsNestedInput
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type StatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type StatsCreateManyInput = {
    id?: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type StatsUpdateManyMutationInput = {
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type StatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SavingThrowsCreateInput = {
    character: CharacterCreateNestedOneWithoutSavingThrowsInput
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type SavingThrowsUncheckedCreateInput = {
    id?: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type SavingThrowsUpdateInput = {
    character?: CharacterUpdateOneRequiredWithoutSavingThrowsNestedInput
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SavingThrowsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SavingThrowsCreateManyInput = {
    id?: number
    characterId: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type SavingThrowsUpdateManyMutationInput = {
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SavingThrowsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SkillsCreateInput = {
    character: CharacterCreateNestedOneWithoutSkillsInput
    acrobatics: number
    animHand: number
    arcane: number
    athl: number
    decep: number
    hist: number
    insight: number
    intimid: number
    invest: number
    med: number
    nature: number
    percep: number
    perf: number
    pers: number
    religion: number
    sOfH: number
    stealth: number
    surv: number
  }

  export type SkillsUncheckedCreateInput = {
    id?: number
    characterId: number
    acrobatics: number
    animHand: number
    arcane: number
    athl: number
    decep: number
    hist: number
    insight: number
    intimid: number
    invest: number
    med: number
    nature: number
    percep: number
    perf: number
    pers: number
    religion: number
    sOfH: number
    stealth: number
    surv: number
  }

  export type SkillsUpdateInput = {
    character?: CharacterUpdateOneRequiredWithoutSkillsNestedInput
    acrobatics?: IntFieldUpdateOperationsInput | number
    animHand?: IntFieldUpdateOperationsInput | number
    arcane?: IntFieldUpdateOperationsInput | number
    athl?: IntFieldUpdateOperationsInput | number
    decep?: IntFieldUpdateOperationsInput | number
    hist?: IntFieldUpdateOperationsInput | number
    insight?: IntFieldUpdateOperationsInput | number
    intimid?: IntFieldUpdateOperationsInput | number
    invest?: IntFieldUpdateOperationsInput | number
    med?: IntFieldUpdateOperationsInput | number
    nature?: IntFieldUpdateOperationsInput | number
    percep?: IntFieldUpdateOperationsInput | number
    perf?: IntFieldUpdateOperationsInput | number
    pers?: IntFieldUpdateOperationsInput | number
    religion?: IntFieldUpdateOperationsInput | number
    sOfH?: IntFieldUpdateOperationsInput | number
    stealth?: IntFieldUpdateOperationsInput | number
    surv?: IntFieldUpdateOperationsInput | number
  }

  export type SkillsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    acrobatics?: IntFieldUpdateOperationsInput | number
    animHand?: IntFieldUpdateOperationsInput | number
    arcane?: IntFieldUpdateOperationsInput | number
    athl?: IntFieldUpdateOperationsInput | number
    decep?: IntFieldUpdateOperationsInput | number
    hist?: IntFieldUpdateOperationsInput | number
    insight?: IntFieldUpdateOperationsInput | number
    intimid?: IntFieldUpdateOperationsInput | number
    invest?: IntFieldUpdateOperationsInput | number
    med?: IntFieldUpdateOperationsInput | number
    nature?: IntFieldUpdateOperationsInput | number
    percep?: IntFieldUpdateOperationsInput | number
    perf?: IntFieldUpdateOperationsInput | number
    pers?: IntFieldUpdateOperationsInput | number
    religion?: IntFieldUpdateOperationsInput | number
    sOfH?: IntFieldUpdateOperationsInput | number
    stealth?: IntFieldUpdateOperationsInput | number
    surv?: IntFieldUpdateOperationsInput | number
  }

  export type SkillsCreateManyInput = {
    id?: number
    characterId: number
    acrobatics: number
    animHand: number
    arcane: number
    athl: number
    decep: number
    hist: number
    insight: number
    intimid: number
    invest: number
    med: number
    nature: number
    percep: number
    perf: number
    pers: number
    religion: number
    sOfH: number
    stealth: number
    surv: number
  }

  export type SkillsUpdateManyMutationInput = {
    acrobatics?: IntFieldUpdateOperationsInput | number
    animHand?: IntFieldUpdateOperationsInput | number
    arcane?: IntFieldUpdateOperationsInput | number
    athl?: IntFieldUpdateOperationsInput | number
    decep?: IntFieldUpdateOperationsInput | number
    hist?: IntFieldUpdateOperationsInput | number
    insight?: IntFieldUpdateOperationsInput | number
    intimid?: IntFieldUpdateOperationsInput | number
    invest?: IntFieldUpdateOperationsInput | number
    med?: IntFieldUpdateOperationsInput | number
    nature?: IntFieldUpdateOperationsInput | number
    percep?: IntFieldUpdateOperationsInput | number
    perf?: IntFieldUpdateOperationsInput | number
    pers?: IntFieldUpdateOperationsInput | number
    religion?: IntFieldUpdateOperationsInput | number
    sOfH?: IntFieldUpdateOperationsInput | number
    stealth?: IntFieldUpdateOperationsInput | number
    surv?: IntFieldUpdateOperationsInput | number
  }

  export type SkillsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    acrobatics?: IntFieldUpdateOperationsInput | number
    animHand?: IntFieldUpdateOperationsInput | number
    arcane?: IntFieldUpdateOperationsInput | number
    athl?: IntFieldUpdateOperationsInput | number
    decep?: IntFieldUpdateOperationsInput | number
    hist?: IntFieldUpdateOperationsInput | number
    insight?: IntFieldUpdateOperationsInput | number
    intimid?: IntFieldUpdateOperationsInput | number
    invest?: IntFieldUpdateOperationsInput | number
    med?: IntFieldUpdateOperationsInput | number
    nature?: IntFieldUpdateOperationsInput | number
    percep?: IntFieldUpdateOperationsInput | number
    perf?: IntFieldUpdateOperationsInput | number
    pers?: IntFieldUpdateOperationsInput | number
    religion?: IntFieldUpdateOperationsInput | number
    sOfH?: IntFieldUpdateOperationsInput | number
    stealth?: IntFieldUpdateOperationsInput | number
    surv?: IntFieldUpdateOperationsInput | number
  }

  export type CombatCreateInput = {
    character: CharacterCreateNestedOneWithoutCombatInput
    hpMax: number
    ac: number
    speed: number
    hitDice: string
  }

  export type CombatUncheckedCreateInput = {
    id?: number
    characterId: number
    hpMax: number
    ac: number
    speed: number
    hitDice: string
  }

  export type CombatUpdateInput = {
    character?: CharacterUpdateOneRequiredWithoutCombatNestedInput
    hpMax?: IntFieldUpdateOperationsInput | number
    ac?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    hitDice?: StringFieldUpdateOperationsInput | string
  }

  export type CombatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    hpMax?: IntFieldUpdateOperationsInput | number
    ac?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    hitDice?: StringFieldUpdateOperationsInput | string
  }

  export type CombatCreateManyInput = {
    id?: number
    characterId: number
    hpMax: number
    ac: number
    speed: number
    hitDice: string
  }

  export type CombatUpdateManyMutationInput = {
    hpMax?: IntFieldUpdateOperationsInput | number
    ac?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    hitDice?: StringFieldUpdateOperationsInput | string
  }

  export type CombatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    characterId?: IntFieldUpdateOperationsInput | number
    hpMax?: IntFieldUpdateOperationsInput | number
    ac?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    hitDice?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StatsRelationFilter = {
    is?: StatsWhereInput | null
    isNot?: StatsWhereInput | null
  }

  export type SavingThrowsRelationFilter = {
    is?: SavingThrowsWhereInput | null
    isNot?: SavingThrowsWhereInput | null
  }

  export type SkillsRelationFilter = {
    is?: SkillsWhereInput | null
    isNot?: SkillsWhereInput | null
  }

  export type CombatRelationFilter = {
    is?: CombatWhereInput | null
    isNot?: CombatWhereInput | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CharacterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    player?: SortOrder
    class?: SortOrder
    level?: SortOrder
    background?: SortOrder
    race?: SortOrder
    alignment?: SortOrder
    profBonus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterAvgOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    profBonus?: SortOrder
  }

  export type CharacterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    player?: SortOrder
    class?: SortOrder
    level?: SortOrder
    background?: SortOrder
    race?: SortOrder
    alignment?: SortOrder
    profBonus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    player?: SortOrder
    class?: SortOrder
    level?: SortOrder
    background?: SortOrder
    race?: SortOrder
    alignment?: SortOrder
    profBonus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CharacterSumOrderByAggregateInput = {
    id?: SortOrder
    level?: SortOrder
    profBonus?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CharacterRelationFilter = {
    is?: CharacterWhereInput
    isNot?: CharacterWhereInput
  }

  export type StatsCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type StatsAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type StatsMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type StatsMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type StatsSumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type SavingThrowsCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type SavingThrowsAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type SavingThrowsMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type SavingThrowsMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type SavingThrowsSumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    str?: SortOrder
    dex?: SortOrder
    con?: SortOrder
    int?: SortOrder
    wis?: SortOrder
    cha?: SortOrder
  }

  export type SkillsCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    acrobatics?: SortOrder
    animHand?: SortOrder
    arcane?: SortOrder
    athl?: SortOrder
    decep?: SortOrder
    hist?: SortOrder
    insight?: SortOrder
    intimid?: SortOrder
    invest?: SortOrder
    med?: SortOrder
    nature?: SortOrder
    percep?: SortOrder
    perf?: SortOrder
    pers?: SortOrder
    religion?: SortOrder
    sOfH?: SortOrder
    stealth?: SortOrder
    surv?: SortOrder
  }

  export type SkillsAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    acrobatics?: SortOrder
    animHand?: SortOrder
    arcane?: SortOrder
    athl?: SortOrder
    decep?: SortOrder
    hist?: SortOrder
    insight?: SortOrder
    intimid?: SortOrder
    invest?: SortOrder
    med?: SortOrder
    nature?: SortOrder
    percep?: SortOrder
    perf?: SortOrder
    pers?: SortOrder
    religion?: SortOrder
    sOfH?: SortOrder
    stealth?: SortOrder
    surv?: SortOrder
  }

  export type SkillsMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    acrobatics?: SortOrder
    animHand?: SortOrder
    arcane?: SortOrder
    athl?: SortOrder
    decep?: SortOrder
    hist?: SortOrder
    insight?: SortOrder
    intimid?: SortOrder
    invest?: SortOrder
    med?: SortOrder
    nature?: SortOrder
    percep?: SortOrder
    perf?: SortOrder
    pers?: SortOrder
    religion?: SortOrder
    sOfH?: SortOrder
    stealth?: SortOrder
    surv?: SortOrder
  }

  export type SkillsMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    acrobatics?: SortOrder
    animHand?: SortOrder
    arcane?: SortOrder
    athl?: SortOrder
    decep?: SortOrder
    hist?: SortOrder
    insight?: SortOrder
    intimid?: SortOrder
    invest?: SortOrder
    med?: SortOrder
    nature?: SortOrder
    percep?: SortOrder
    perf?: SortOrder
    pers?: SortOrder
    religion?: SortOrder
    sOfH?: SortOrder
    stealth?: SortOrder
    surv?: SortOrder
  }

  export type SkillsSumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    acrobatics?: SortOrder
    animHand?: SortOrder
    arcane?: SortOrder
    athl?: SortOrder
    decep?: SortOrder
    hist?: SortOrder
    insight?: SortOrder
    intimid?: SortOrder
    invest?: SortOrder
    med?: SortOrder
    nature?: SortOrder
    percep?: SortOrder
    perf?: SortOrder
    pers?: SortOrder
    religion?: SortOrder
    sOfH?: SortOrder
    stealth?: SortOrder
    surv?: SortOrder
  }

  export type CombatCountOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    hpMax?: SortOrder
    ac?: SortOrder
    speed?: SortOrder
    hitDice?: SortOrder
  }

  export type CombatAvgOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    hpMax?: SortOrder
    ac?: SortOrder
    speed?: SortOrder
  }

  export type CombatMaxOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    hpMax?: SortOrder
    ac?: SortOrder
    speed?: SortOrder
    hitDice?: SortOrder
  }

  export type CombatMinOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    hpMax?: SortOrder
    ac?: SortOrder
    speed?: SortOrder
    hitDice?: SortOrder
  }

  export type CombatSumOrderByAggregateInput = {
    id?: SortOrder
    characterId?: SortOrder
    hpMax?: SortOrder
    ac?: SortOrder
    speed?: SortOrder
  }

  export type StatsCreateNestedOneWithoutCharacterInput = {
    create?: XOR<StatsCreateWithoutCharacterInput, StatsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StatsCreateOrConnectWithoutCharacterInput
    connect?: StatsWhereUniqueInput
  }

  export type SavingThrowsCreateNestedOneWithoutCharacterInput = {
    create?: XOR<SavingThrowsCreateWithoutCharacterInput, SavingThrowsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SavingThrowsCreateOrConnectWithoutCharacterInput
    connect?: SavingThrowsWhereUniqueInput
  }

  export type SkillsCreateNestedOneWithoutCharacterInput = {
    create?: XOR<SkillsCreateWithoutCharacterInput, SkillsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutCharacterInput
    connect?: SkillsWhereUniqueInput
  }

  export type CombatCreateNestedOneWithoutCharacterInput = {
    create?: XOR<CombatCreateWithoutCharacterInput, CombatUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: CombatCreateOrConnectWithoutCharacterInput
    connect?: CombatWhereUniqueInput
  }

  export type StatsUncheckedCreateNestedOneWithoutCharacterInput = {
    create?: XOR<StatsCreateWithoutCharacterInput, StatsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StatsCreateOrConnectWithoutCharacterInput
    connect?: StatsWhereUniqueInput
  }

  export type SavingThrowsUncheckedCreateNestedOneWithoutCharacterInput = {
    create?: XOR<SavingThrowsCreateWithoutCharacterInput, SavingThrowsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SavingThrowsCreateOrConnectWithoutCharacterInput
    connect?: SavingThrowsWhereUniqueInput
  }

  export type SkillsUncheckedCreateNestedOneWithoutCharacterInput = {
    create?: XOR<SkillsCreateWithoutCharacterInput, SkillsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutCharacterInput
    connect?: SkillsWhereUniqueInput
  }

  export type CombatUncheckedCreateNestedOneWithoutCharacterInput = {
    create?: XOR<CombatCreateWithoutCharacterInput, CombatUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: CombatCreateOrConnectWithoutCharacterInput
    connect?: CombatWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StatsUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<StatsCreateWithoutCharacterInput, StatsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StatsCreateOrConnectWithoutCharacterInput
    upsert?: StatsUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: StatsWhereUniqueInput
    update?: XOR<StatsUpdateWithoutCharacterInput, StatsUncheckedUpdateWithoutCharacterInput>
  }

  export type SavingThrowsUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<SavingThrowsCreateWithoutCharacterInput, SavingThrowsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SavingThrowsCreateOrConnectWithoutCharacterInput
    upsert?: SavingThrowsUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: SavingThrowsWhereUniqueInput
    update?: XOR<SavingThrowsUpdateWithoutCharacterInput, SavingThrowsUncheckedUpdateWithoutCharacterInput>
  }

  export type SkillsUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<SkillsCreateWithoutCharacterInput, SkillsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutCharacterInput
    upsert?: SkillsUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: SkillsWhereUniqueInput
    update?: XOR<SkillsUpdateWithoutCharacterInput, SkillsUncheckedUpdateWithoutCharacterInput>
  }

  export type CombatUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<CombatCreateWithoutCharacterInput, CombatUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: CombatCreateOrConnectWithoutCharacterInput
    upsert?: CombatUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: CombatWhereUniqueInput
    update?: XOR<CombatUpdateWithoutCharacterInput, CombatUncheckedUpdateWithoutCharacterInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StatsUncheckedUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<StatsCreateWithoutCharacterInput, StatsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: StatsCreateOrConnectWithoutCharacterInput
    upsert?: StatsUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: StatsWhereUniqueInput
    update?: XOR<StatsUpdateWithoutCharacterInput, StatsUncheckedUpdateWithoutCharacterInput>
  }

  export type SavingThrowsUncheckedUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<SavingThrowsCreateWithoutCharacterInput, SavingThrowsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SavingThrowsCreateOrConnectWithoutCharacterInput
    upsert?: SavingThrowsUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: SavingThrowsWhereUniqueInput
    update?: XOR<SavingThrowsUpdateWithoutCharacterInput, SavingThrowsUncheckedUpdateWithoutCharacterInput>
  }

  export type SkillsUncheckedUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<SkillsCreateWithoutCharacterInput, SkillsUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: SkillsCreateOrConnectWithoutCharacterInput
    upsert?: SkillsUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: SkillsWhereUniqueInput
    update?: XOR<SkillsUpdateWithoutCharacterInput, SkillsUncheckedUpdateWithoutCharacterInput>
  }

  export type CombatUncheckedUpdateOneWithoutCharacterNestedInput = {
    create?: XOR<CombatCreateWithoutCharacterInput, CombatUncheckedCreateWithoutCharacterInput>
    connectOrCreate?: CombatCreateOrConnectWithoutCharacterInput
    upsert?: CombatUpsertWithoutCharacterInput
    disconnect?: boolean
    delete?: boolean
    connect?: CombatWhereUniqueInput
    update?: XOR<CombatUpdateWithoutCharacterInput, CombatUncheckedUpdateWithoutCharacterInput>
  }

  export type CharacterCreateNestedOneWithoutStatsInput = {
    create?: XOR<CharacterCreateWithoutStatsInput, CharacterUncheckedCreateWithoutStatsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutStatsInput
    connect?: CharacterWhereUniqueInput
  }

  export type CharacterUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<CharacterCreateWithoutStatsInput, CharacterUncheckedCreateWithoutStatsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutStatsInput
    upsert?: CharacterUpsertWithoutStatsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<CharacterUpdateWithoutStatsInput, CharacterUncheckedUpdateWithoutStatsInput>
  }

  export type CharacterCreateNestedOneWithoutSavingThrowsInput = {
    create?: XOR<CharacterCreateWithoutSavingThrowsInput, CharacterUncheckedCreateWithoutSavingThrowsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutSavingThrowsInput
    connect?: CharacterWhereUniqueInput
  }

  export type CharacterUpdateOneRequiredWithoutSavingThrowsNestedInput = {
    create?: XOR<CharacterCreateWithoutSavingThrowsInput, CharacterUncheckedCreateWithoutSavingThrowsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutSavingThrowsInput
    upsert?: CharacterUpsertWithoutSavingThrowsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<CharacterUpdateWithoutSavingThrowsInput, CharacterUncheckedUpdateWithoutSavingThrowsInput>
  }

  export type CharacterCreateNestedOneWithoutSkillsInput = {
    create?: XOR<CharacterCreateWithoutSkillsInput, CharacterUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutSkillsInput
    connect?: CharacterWhereUniqueInput
  }

  export type CharacterUpdateOneRequiredWithoutSkillsNestedInput = {
    create?: XOR<CharacterCreateWithoutSkillsInput, CharacterUncheckedCreateWithoutSkillsInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutSkillsInput
    upsert?: CharacterUpsertWithoutSkillsInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<CharacterUpdateWithoutSkillsInput, CharacterUncheckedUpdateWithoutSkillsInput>
  }

  export type CharacterCreateNestedOneWithoutCombatInput = {
    create?: XOR<CharacterCreateWithoutCombatInput, CharacterUncheckedCreateWithoutCombatInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutCombatInput
    connect?: CharacterWhereUniqueInput
  }

  export type CharacterUpdateOneRequiredWithoutCombatNestedInput = {
    create?: XOR<CharacterCreateWithoutCombatInput, CharacterUncheckedCreateWithoutCombatInput>
    connectOrCreate?: CharacterCreateOrConnectWithoutCombatInput
    upsert?: CharacterUpsertWithoutCombatInput
    connect?: CharacterWhereUniqueInput
    update?: XOR<CharacterUpdateWithoutCombatInput, CharacterUncheckedUpdateWithoutCombatInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StatsCreateWithoutCharacterInput = {
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type StatsUncheckedCreateWithoutCharacterInput = {
    id?: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type StatsCreateOrConnectWithoutCharacterInput = {
    where: StatsWhereUniqueInput
    create: XOR<StatsCreateWithoutCharacterInput, StatsUncheckedCreateWithoutCharacterInput>
  }

  export type SavingThrowsCreateWithoutCharacterInput = {
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type SavingThrowsUncheckedCreateWithoutCharacterInput = {
    id?: number
    str: number
    dex: number
    con: number
    int: number
    wis: number
    cha: number
  }

  export type SavingThrowsCreateOrConnectWithoutCharacterInput = {
    where: SavingThrowsWhereUniqueInput
    create: XOR<SavingThrowsCreateWithoutCharacterInput, SavingThrowsUncheckedCreateWithoutCharacterInput>
  }

  export type SkillsCreateWithoutCharacterInput = {
    acrobatics: number
    animHand: number
    arcane: number
    athl: number
    decep: number
    hist: number
    insight: number
    intimid: number
    invest: number
    med: number
    nature: number
    percep: number
    perf: number
    pers: number
    religion: number
    sOfH: number
    stealth: number
    surv: number
  }

  export type SkillsUncheckedCreateWithoutCharacterInput = {
    id?: number
    acrobatics: number
    animHand: number
    arcane: number
    athl: number
    decep: number
    hist: number
    insight: number
    intimid: number
    invest: number
    med: number
    nature: number
    percep: number
    perf: number
    pers: number
    religion: number
    sOfH: number
    stealth: number
    surv: number
  }

  export type SkillsCreateOrConnectWithoutCharacterInput = {
    where: SkillsWhereUniqueInput
    create: XOR<SkillsCreateWithoutCharacterInput, SkillsUncheckedCreateWithoutCharacterInput>
  }

  export type CombatCreateWithoutCharacterInput = {
    hpMax: number
    ac: number
    speed: number
    hitDice: string
  }

  export type CombatUncheckedCreateWithoutCharacterInput = {
    id?: number
    hpMax: number
    ac: number
    speed: number
    hitDice: string
  }

  export type CombatCreateOrConnectWithoutCharacterInput = {
    where: CombatWhereUniqueInput
    create: XOR<CombatCreateWithoutCharacterInput, CombatUncheckedCreateWithoutCharacterInput>
  }

  export type StatsUpsertWithoutCharacterInput = {
    update: XOR<StatsUpdateWithoutCharacterInput, StatsUncheckedUpdateWithoutCharacterInput>
    create: XOR<StatsCreateWithoutCharacterInput, StatsUncheckedCreateWithoutCharacterInput>
  }

  export type StatsUpdateWithoutCharacterInput = {
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type StatsUncheckedUpdateWithoutCharacterInput = {
    id?: IntFieldUpdateOperationsInput | number
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SavingThrowsUpsertWithoutCharacterInput = {
    update: XOR<SavingThrowsUpdateWithoutCharacterInput, SavingThrowsUncheckedUpdateWithoutCharacterInput>
    create: XOR<SavingThrowsCreateWithoutCharacterInput, SavingThrowsUncheckedCreateWithoutCharacterInput>
  }

  export type SavingThrowsUpdateWithoutCharacterInput = {
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SavingThrowsUncheckedUpdateWithoutCharacterInput = {
    id?: IntFieldUpdateOperationsInput | number
    str?: IntFieldUpdateOperationsInput | number
    dex?: IntFieldUpdateOperationsInput | number
    con?: IntFieldUpdateOperationsInput | number
    int?: IntFieldUpdateOperationsInput | number
    wis?: IntFieldUpdateOperationsInput | number
    cha?: IntFieldUpdateOperationsInput | number
  }

  export type SkillsUpsertWithoutCharacterInput = {
    update: XOR<SkillsUpdateWithoutCharacterInput, SkillsUncheckedUpdateWithoutCharacterInput>
    create: XOR<SkillsCreateWithoutCharacterInput, SkillsUncheckedCreateWithoutCharacterInput>
  }

  export type SkillsUpdateWithoutCharacterInput = {
    acrobatics?: IntFieldUpdateOperationsInput | number
    animHand?: IntFieldUpdateOperationsInput | number
    arcane?: IntFieldUpdateOperationsInput | number
    athl?: IntFieldUpdateOperationsInput | number
    decep?: IntFieldUpdateOperationsInput | number
    hist?: IntFieldUpdateOperationsInput | number
    insight?: IntFieldUpdateOperationsInput | number
    intimid?: IntFieldUpdateOperationsInput | number
    invest?: IntFieldUpdateOperationsInput | number
    med?: IntFieldUpdateOperationsInput | number
    nature?: IntFieldUpdateOperationsInput | number
    percep?: IntFieldUpdateOperationsInput | number
    perf?: IntFieldUpdateOperationsInput | number
    pers?: IntFieldUpdateOperationsInput | number
    religion?: IntFieldUpdateOperationsInput | number
    sOfH?: IntFieldUpdateOperationsInput | number
    stealth?: IntFieldUpdateOperationsInput | number
    surv?: IntFieldUpdateOperationsInput | number
  }

  export type SkillsUncheckedUpdateWithoutCharacterInput = {
    id?: IntFieldUpdateOperationsInput | number
    acrobatics?: IntFieldUpdateOperationsInput | number
    animHand?: IntFieldUpdateOperationsInput | number
    arcane?: IntFieldUpdateOperationsInput | number
    athl?: IntFieldUpdateOperationsInput | number
    decep?: IntFieldUpdateOperationsInput | number
    hist?: IntFieldUpdateOperationsInput | number
    insight?: IntFieldUpdateOperationsInput | number
    intimid?: IntFieldUpdateOperationsInput | number
    invest?: IntFieldUpdateOperationsInput | number
    med?: IntFieldUpdateOperationsInput | number
    nature?: IntFieldUpdateOperationsInput | number
    percep?: IntFieldUpdateOperationsInput | number
    perf?: IntFieldUpdateOperationsInput | number
    pers?: IntFieldUpdateOperationsInput | number
    religion?: IntFieldUpdateOperationsInput | number
    sOfH?: IntFieldUpdateOperationsInput | number
    stealth?: IntFieldUpdateOperationsInput | number
    surv?: IntFieldUpdateOperationsInput | number
  }

  export type CombatUpsertWithoutCharacterInput = {
    update: XOR<CombatUpdateWithoutCharacterInput, CombatUncheckedUpdateWithoutCharacterInput>
    create: XOR<CombatCreateWithoutCharacterInput, CombatUncheckedCreateWithoutCharacterInput>
  }

  export type CombatUpdateWithoutCharacterInput = {
    hpMax?: IntFieldUpdateOperationsInput | number
    ac?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    hitDice?: StringFieldUpdateOperationsInput | string
  }

  export type CombatUncheckedUpdateWithoutCharacterInput = {
    id?: IntFieldUpdateOperationsInput | number
    hpMax?: IntFieldUpdateOperationsInput | number
    ac?: IntFieldUpdateOperationsInput | number
    speed?: IntFieldUpdateOperationsInput | number
    hitDice?: StringFieldUpdateOperationsInput | string
  }

  export type CharacterCreateWithoutStatsInput = {
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    savingThrows?: SavingThrowsCreateNestedOneWithoutCharacterInput
    skills?: SkillsCreateNestedOneWithoutCharacterInput
    combat?: CombatCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUncheckedCreateWithoutStatsInput = {
    id?: number
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    savingThrows?: SavingThrowsUncheckedCreateNestedOneWithoutCharacterInput
    skills?: SkillsUncheckedCreateNestedOneWithoutCharacterInput
    combat?: CombatUncheckedCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterCreateOrConnectWithoutStatsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutStatsInput, CharacterUncheckedCreateWithoutStatsInput>
  }

  export type CharacterUpsertWithoutStatsInput = {
    update: XOR<CharacterUpdateWithoutStatsInput, CharacterUncheckedUpdateWithoutStatsInput>
    create: XOR<CharacterCreateWithoutStatsInput, CharacterUncheckedCreateWithoutStatsInput>
  }

  export type CharacterUpdateWithoutStatsInput = {
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    savingThrows?: SavingThrowsUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUpdateOneWithoutCharacterNestedInput
    combat?: CombatUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateWithoutStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    savingThrows?: SavingThrowsUncheckedUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUncheckedUpdateOneWithoutCharacterNestedInput
    combat?: CombatUncheckedUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateWithoutSavingThrowsInput = {
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsCreateNestedOneWithoutCharacterInput
    skills?: SkillsCreateNestedOneWithoutCharacterInput
    combat?: CombatCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUncheckedCreateWithoutSavingThrowsInput = {
    id?: number
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsUncheckedCreateNestedOneWithoutCharacterInput
    skills?: SkillsUncheckedCreateNestedOneWithoutCharacterInput
    combat?: CombatUncheckedCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterCreateOrConnectWithoutSavingThrowsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutSavingThrowsInput, CharacterUncheckedCreateWithoutSavingThrowsInput>
  }

  export type CharacterUpsertWithoutSavingThrowsInput = {
    update: XOR<CharacterUpdateWithoutSavingThrowsInput, CharacterUncheckedUpdateWithoutSavingThrowsInput>
    create: XOR<CharacterCreateWithoutSavingThrowsInput, CharacterUncheckedCreateWithoutSavingThrowsInput>
  }

  export type CharacterUpdateWithoutSavingThrowsInput = {
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUpdateOneWithoutCharacterNestedInput
    combat?: CombatUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateWithoutSavingThrowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUncheckedUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUncheckedUpdateOneWithoutCharacterNestedInput
    combat?: CombatUncheckedUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateWithoutSkillsInput = {
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsCreateNestedOneWithoutCharacterInput
    savingThrows?: SavingThrowsCreateNestedOneWithoutCharacterInput
    combat?: CombatCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUncheckedCreateWithoutSkillsInput = {
    id?: number
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsUncheckedCreateNestedOneWithoutCharacterInput
    savingThrows?: SavingThrowsUncheckedCreateNestedOneWithoutCharacterInput
    combat?: CombatUncheckedCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterCreateOrConnectWithoutSkillsInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutSkillsInput, CharacterUncheckedCreateWithoutSkillsInput>
  }

  export type CharacterUpsertWithoutSkillsInput = {
    update: XOR<CharacterUpdateWithoutSkillsInput, CharacterUncheckedUpdateWithoutSkillsInput>
    create: XOR<CharacterCreateWithoutSkillsInput, CharacterUncheckedCreateWithoutSkillsInput>
  }

  export type CharacterUpdateWithoutSkillsInput = {
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUpdateOneWithoutCharacterNestedInput
    savingThrows?: SavingThrowsUpdateOneWithoutCharacterNestedInput
    combat?: CombatUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateWithoutSkillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUncheckedUpdateOneWithoutCharacterNestedInput
    savingThrows?: SavingThrowsUncheckedUpdateOneWithoutCharacterNestedInput
    combat?: CombatUncheckedUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterCreateWithoutCombatInput = {
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsCreateNestedOneWithoutCharacterInput
    savingThrows?: SavingThrowsCreateNestedOneWithoutCharacterInput
    skills?: SkillsCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterUncheckedCreateWithoutCombatInput = {
    id?: number
    name: string
    player: string
    class: string
    level: number
    background: string
    race: string
    alignment: string
    profBonus: number
    stats?: StatsUncheckedCreateNestedOneWithoutCharacterInput
    savingThrows?: SavingThrowsUncheckedCreateNestedOneWithoutCharacterInput
    skills?: SkillsUncheckedCreateNestedOneWithoutCharacterInput
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CharacterCreateOrConnectWithoutCombatInput = {
    where: CharacterWhereUniqueInput
    create: XOR<CharacterCreateWithoutCombatInput, CharacterUncheckedCreateWithoutCombatInput>
  }

  export type CharacterUpsertWithoutCombatInput = {
    update: XOR<CharacterUpdateWithoutCombatInput, CharacterUncheckedUpdateWithoutCombatInput>
    create: XOR<CharacterCreateWithoutCombatInput, CharacterUncheckedCreateWithoutCombatInput>
  }

  export type CharacterUpdateWithoutCombatInput = {
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUpdateOneWithoutCharacterNestedInput
    savingThrows?: SavingThrowsUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CharacterUncheckedUpdateWithoutCombatInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    player?: StringFieldUpdateOperationsInput | string
    class?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    background?: StringFieldUpdateOperationsInput | string
    race?: StringFieldUpdateOperationsInput | string
    alignment?: StringFieldUpdateOperationsInput | string
    profBonus?: IntFieldUpdateOperationsInput | number
    stats?: StatsUncheckedUpdateOneWithoutCharacterNestedInput
    savingThrows?: SavingThrowsUncheckedUpdateOneWithoutCharacterNestedInput
    skills?: SkillsUncheckedUpdateOneWithoutCharacterNestedInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}