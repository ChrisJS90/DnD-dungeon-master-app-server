
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.15.2
 * Query Engine version: ca7fcef713137fa11029d519a9780db130cca91d
 */
Prisma.prismaVersion = {
  client: "3.15.2",
  engine: "ca7fcef713137fa11029d519a9780db130cca91d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CharacterScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  player: 'player',
  class: 'class',
  level: 'level',
  background: 'background',
  race: 'race',
  alignment: 'alignment',
  profBonus: 'profBonus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CombatScalarFieldEnum = makeEnum({
  id: 'id',
  characterId: 'characterId',
  hpMax: 'hpMax',
  ac: 'ac',
  speed: 'speed',
  hitDice: 'hitDice'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.SavingThrowsScalarFieldEnum = makeEnum({
  id: 'id',
  characterId: 'characterId',
  str: 'str',
  dex: 'dex',
  con: 'con',
  int: 'int',
  wis: 'wis',
  cha: 'cha'
});

exports.Prisma.SkillsScalarFieldEnum = makeEnum({
  id: 'id',
  characterId: 'characterId',
  acrobatics: 'acrobatics',
  animHand: 'animHand',
  arcane: 'arcane',
  athl: 'athl',
  decep: 'decep',
  hist: 'hist',
  insight: 'insight',
  intimid: 'intimid',
  invest: 'invest',
  med: 'med',
  nature: 'nature',
  percep: 'percep',
  perf: 'perf',
  pers: 'pers',
  religion: 'religion',
  sOfH: 'sOfH',
  stealth: 'stealth',
  surv: 'surv'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.StatsScalarFieldEnum = makeEnum({
  id: 'id',
  characterId: 'characterId',
  str: 'str',
  dex: 'dex',
  con: 'con',
  int: 'int',
  wis: 'wis',
  cha: 'cha'
});

exports.Prisma.TransactionIsolationLevel = makeEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});


exports.Prisma.ModelName = makeEnum({
  Character: 'Character',
  Stats: 'Stats',
  SavingThrows: 'SavingThrows',
  Skills: 'Skills',
  Combat: 'Combat'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
